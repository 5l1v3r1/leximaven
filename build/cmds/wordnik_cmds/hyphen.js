'use strict';

var themes = require('../../themes');
var tools = require('../../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'hyphen <word>';
exports.desc = 'Wordnik hyphenations';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  limit: {
    alias: 'l',
    desc: 'Limit number of results',
    default: 5,
    type: 'number'
  },
  canon: {
    alias: 'c',
    desc: 'Use canonical',
    default: false,
    type: 'boolean'
  },
  dict: {
    alias: 'd',
    desc: 'Source dictionary ahd, century, wiktionary, webster, wordnet',
    default: 'all',
    type: 'string'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    hyphen: {
      canon: argv.c,
      dict: argv.d,
      limit: argv.l
    }
  };
  if (config.prefer) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Wordnik', theme, null);
  var word = argv.word;
  var task = 'hyphenation';
  var prefix = 'http://api.wordnik.com:80/v4/word.json/';
  var apikey = process.env.WORDNIK;
  var uri = '' + prefix + word + '/' + task + '?';
  var pcont = [];
  pcont.push('useCanonical=' + config.hyphen.canon + '&');
  if (argv.d !== 'all') pcont.push('sourceDictionary=' + config.hyphen.dict + '&');
  pcont.push('limit=' + config.hyphen.limit + '&');
  pcont.push('api_key=' + apikey);
  var rest = pcont.join('');
  var url = '' + uri + rest;
  url = encodeURI(url);
  var tofile = { type: 'hyphenation', source: 'http://www.wordnik.com' };
  var ctstyle = _.get(chalk, theme.content.style);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var list = response.body;
      themes.labelRight('Hyphenation', theme, null);
      for (var i = 0; i <= list.length - 1; i++) {
        var item = list[i];
        if (item.type === 'stress') {
          process.stdout.write('' + chalk.red.bold(item.text));
          tofile[['stress' + i]] = item.text;
        } else if (item.type === 'secondary stress') {
          process.stdout.write(ctstyle(item.text));
          tofile[['secondary' + i]] = item.text;
        } else {
          process.stdout.write(ctstyle(item.text));
          tofile[['syllable' + i]] = item.text;
        }
        if (i < list.length - 1) {
          process.stdout.write(ctstyle('-'));
        }
      }
      console.log('');
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.prefer) noon.save(CFILE, config);
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,