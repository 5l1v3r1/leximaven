'use strict';

var themes = require('../../themes');
var tools = require('../../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'define <word>';
exports.desc = 'Wordnik definitions';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  limit: {
    alias: 'l',
    desc: 'Limit number of results',
    default: 5,
    type: 'number'
  },
  canon: {
    alias: 'c',
    desc: 'Use canonical',
    default: false,
    type: 'boolean'
  },
  defdict: {
    alias: 'd',
    desc: "CSV list of dictionaries or 'all'",
    default: 'all',
    type: 'string'
  },
  part: {
    alias: 'p',
    desc: 'CSV list of parts of speech. See http://developer.wordnik.com/docs.html for list of parts.',
    default: '',
    type: 'string'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    define: {
      canon: argv.c,
      limit: argv.l,
      defdict: argv.d,
      part: argv.p
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Wordnik', theme, null);
  var word = argv.word;
  var task = 'definitions';
  var prefix = 'http://api.wordnik.com:80/v4/word.json/';
  var apikey = process.env.WORDNIK;
  var uri = '' + prefix + word + '/' + task + '?';
  var pcont = [];
  pcont.push('useCanonical=' + config.define.canon + '&');
  pcont.push('sourceDictionaries=' + config.define.defdict + '&');
  pcont.push('includeRelated=false&');
  pcont.push('includeTags=false&');
  pcont.push('limit=' + config.define.limit + '&');
  pcont.push('partOfSpeech=' + config.define.part + '&');
  pcont.push('api_key=' + apikey);
  var rest = pcont.join('');
  var url = '' + uri + rest;
  url = encodeURI(url);
  var tofile = { type: 'definition', source: 'http://www.wordnik.com' };
  var cstyle = _.get(chalk, theme.connector.style);
  var ctstyle = _.get(chalk, theme.content.style);
  var uline = _.get(chalk, theme.content.style + '.underline');
  var conn = cstyle(theme.connector.str);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var list = response.body;
      for (var i = 0; i <= list.length - 1; i++) {
        var item = list[i];
        var icont = [];
        icont.push(ctstyle(item.text + ' '));
        icont.push(uline(item.partOfSpeech));
        icont.push(conn);
        icont.push(ctstyle(item.sourceDictionary));
        themes.labelRight('Definition', theme, icont.join(''));
        tofile[['text' + i]] = item.text;
        tofile[['deftype' + i]] = item.partOfSpeech;
        tofile[['source' + i]] = item.sourceDictionary;
      }
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.merge) noon.save(CFILE, config);
      if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,