'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'dmuse <condition>';
exports.desc = 'Datamuse query';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  max: {
    alias: 'm',
    desc: 'Maximum number of results, 1 to 1000',
    default: 5,
    type: 'number'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    dmuse: {
      max: argv.m
    }
  };
  if (config.prefer) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Datamuse', theme, null);
  var ccont = [];
  if (argv._.length > 1) {
    for (var i = 0; i <= argv._.length - 1; i++) {
      ccont.push(argv._[i]);
    }
  }
  var prefix = 'http://api.datamuse.com/words?';
  var conditions = 'max=' + config.dmuse.max + '&';
  _.each(ccont, function (value) {
    conditions = conditions + '&' + value;
  });
  var url = '' + prefix + conditions;
  url = encodeURI(url);
  var tags = {
    n: 'noun',
    adj: 'adjective',
    adv: 'adverb',
    syn: 'synonym'
  };
  var tofile = { type: 'datamuse', source: 'http://datamuse.com/api' };
  var ctstyle = _.get(chalk, theme.content.style);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var resp = response.body;
      for (var _i = 0; _i <= resp.length - 1; _i++) {
        var item = resp[_i];
        themes.labelRight('Match', theme, item.word + ' ');
        tofile[['match' + _i]] = item.word;
        if (item.tags !== undefined && item.tags !== []) {
          themes.labelRight('Tags', theme, null);
          for (var j = 0; j <= item.tags.length - 1; j++) {
            if (j === item.tags.length - 1) {
              process.stdout.write(ctstyle('' + tags[item.tags[j]]));
              tofile[['tags' + j]] = tags[item.tags[j]];
            } else {
              process.stdout.write(ctstyle(tags[item.tags[j]] + ', '));
            }
          }
          console.log('');
        }
      }
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.prefer) noon.save(CFILE, config);
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNtZHMvZGF0YW11c2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLFNBQVMsUUFBUSxXQUFSLENBQWY7QUFDQSxJQUFNLFFBQVEsUUFBUSxVQUFSLENBQWQ7O0FBRUEsSUFBTSxJQUFJLFFBQVEsUUFBUixDQUFWO0FBQ0EsSUFBTSxRQUFRLFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTSxTQUFTLFFBQVEsUUFBUixDQUFmO0FBQ0EsSUFBTSxPQUFPLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU0sUUFBVyxRQUFRLEdBQVIsQ0FBWSxJQUF2QixxQkFBTjs7QUFFQSxRQUFRLE9BQVIsR0FBa0IsbUJBQWxCO0FBQ0EsUUFBUSxJQUFSLEdBQWUsZ0JBQWY7QUFDQSxRQUFRLE9BQVIsR0FBa0I7QUFDaEIsT0FBSztBQUNILFdBQU8sR0FESjtBQUVILFVBQU0sMENBRkg7QUFHSCxhQUFTLEVBSE47QUFJSCxVQUFNO0FBSkgsR0FEVztBQU9oQixTQUFPO0FBQ0wsV0FBTyxHQURGO0FBRUwsVUFBTSwyQkFGRDtBQUdMLGFBQVMsS0FISjtBQUlMLFVBQU07QUFKRCxHQVBTO0FBYWhCLFFBQU07QUFDSixXQUFPLEdBREg7QUFFSixVQUFNLDJCQUZGO0FBR0osYUFBUyxLQUhMO0FBSUosVUFBTTtBQUpGLEdBYlU7QUFtQmhCLE9BQUs7QUFDSCxXQUFPLEdBREo7QUFFSCxVQUFNLHNDQUZIO0FBR0gsYUFBUyxDQUhOO0FBSUgsVUFBTTtBQUpIO0FBbkJXLENBQWxCO0FBMEJBLFFBQVEsT0FBUixHQUFrQixVQUFDLElBQUQsRUFBVTtBQUMxQixRQUFNLFdBQU4sQ0FBa0IsS0FBbEI7QUFDQSxNQUFJLFNBQVMsS0FBSyxJQUFMLENBQVUsS0FBVixDQUFiO0FBQ0EsTUFBTSxhQUFhO0FBQ2pCLFdBQU87QUFDTCxXQUFLLEtBQUs7QUFETDtBQURVLEdBQW5CO0FBS0EsTUFBSSxPQUFPLE1BQVgsRUFBbUIsU0FBUyxFQUFFLEtBQUYsQ0FBUSxFQUFSLEVBQVksTUFBWixFQUFvQixVQUFwQixDQUFUO0FBQ25CLE1BQU0sUUFBUSxPQUFPLFNBQVAsQ0FBaUIsT0FBTyxLQUF4QixDQUFkO0FBQ0EsTUFBSSxPQUFPLE9BQVgsRUFBb0IsT0FBTyxTQUFQLENBQWlCLFVBQWpCLEVBQTZCLEtBQTdCLEVBQW9DLElBQXBDO0FBQ3BCLE1BQU0sUUFBUSxFQUFkO0FBQ0EsTUFBSSxLQUFLLENBQUwsQ0FBTyxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsS0FBSyxLQUFLLENBQUwsQ0FBTyxNQUFQLEdBQWdCLENBQXJDLEVBQXdDLEdBQXhDLEVBQTZDO0FBQzNDLFlBQU0sSUFBTixDQUFXLEtBQUssQ0FBTCxDQUFPLENBQVAsQ0FBWDtBQUNEO0FBQ0Y7QUFDRCxNQUFNLFNBQVMsZ0NBQWY7QUFDQSxNQUFJLHNCQUFvQixPQUFPLEtBQVAsQ0FBYSxHQUFqQyxNQUFKO0FBQ0EsSUFBRSxJQUFGLENBQU8sS0FBUCxFQUFjLFVBQUMsS0FBRCxFQUFXO0FBQ3ZCLGlCQUFnQixVQUFoQixTQUE4QixLQUE5QjtBQUNELEdBRkQ7QUFHQSxNQUFJLFdBQVMsTUFBVCxHQUFrQixVQUF0QjtBQUNBLFFBQU0sVUFBVSxHQUFWLENBQU47QUFDQSxNQUFNLE9BQU87QUFDWCxPQUFHLE1BRFE7QUFFWCxTQUFLLFdBRk07QUFHWCxTQUFLLFFBSE07QUFJWCxTQUFLO0FBSk0sR0FBYjtBQU1BLE1BQU0sU0FBUyxFQUFFLE1BQU0sVUFBUixFQUFvQixRQUFRLHlCQUE1QixFQUFmO0FBQ0EsTUFBTSxVQUFVLEVBQUUsR0FBRixDQUFNLEtBQU4sRUFBYSxNQUFNLE9BQU4sQ0FBYyxLQUEzQixDQUFoQjtBQUNBLFNBQU8sR0FBUCxDQUFXLEdBQVgsRUFBZ0IsVUFBQyxLQUFELEVBQVEsUUFBUixFQUFxQjtBQUNuQyxRQUFJLENBQUMsS0FBRCxJQUFVLFNBQVMsVUFBVCxLQUF3QixHQUF0QyxFQUEyQztBQUN6QyxVQUFNLE9BQU8sU0FBUyxJQUF0QjtBQUNBLFdBQUssSUFBSSxLQUFJLENBQWIsRUFBZ0IsTUFBSyxLQUFLLE1BQUwsR0FBYyxDQUFuQyxFQUFzQyxJQUF0QyxFQUEyQztBQUN6QyxZQUFNLE9BQU8sS0FBSyxFQUFMLENBQWI7QUFDQSxlQUFPLFVBQVAsQ0FBa0IsT0FBbEIsRUFBMkIsS0FBM0IsRUFBcUMsS0FBSyxJQUExQztBQUNBLGVBQU8sV0FBUyxFQUFULENBQVAsSUFBd0IsS0FBSyxJQUE3QjtBQUNBLFlBQUksS0FBSyxJQUFMLEtBQWMsU0FBZCxJQUEyQixLQUFLLElBQUwsS0FBYyxFQUE3QyxFQUFpRDtBQUMvQyxpQkFBTyxVQUFQLENBQWtCLE1BQWxCLEVBQTBCLEtBQTFCLEVBQWlDLElBQWpDO0FBQ0EsZUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixLQUFLLEtBQUssSUFBTCxDQUFVLE1BQVYsR0FBbUIsQ0FBeEMsRUFBMkMsR0FBM0MsRUFBZ0Q7QUFDOUMsZ0JBQUksTUFBTSxLQUFLLElBQUwsQ0FBVSxNQUFWLEdBQW1CLENBQTdCLEVBQWdDO0FBQzlCLHNCQUFRLE1BQVIsQ0FBZSxLQUFmLENBQXFCLGFBQVcsS0FBSyxLQUFLLElBQUwsQ0FBVSxDQUFWLENBQUwsQ0FBWCxDQUFyQjtBQUNBLHFCQUFPLFVBQVEsQ0FBUixDQUFQLElBQXVCLEtBQUssS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFMLENBQXZCO0FBQ0QsYUFIRCxNQUdPO0FBQ0wsc0JBQVEsTUFBUixDQUFlLEtBQWYsQ0FBcUIsUUFBVyxLQUFLLEtBQUssSUFBTCxDQUFVLENBQVYsQ0FBTCxDQUFYLFFBQXJCO0FBQ0Q7QUFDRjtBQUNELGtCQUFRLEdBQVIsQ0FBWSxFQUFaO0FBQ0Q7QUFDRjtBQUNELFVBQUksS0FBSyxDQUFULEVBQVksTUFBTSxPQUFOLENBQWMsS0FBSyxDQUFuQixFQUFzQixLQUFLLENBQTNCLEVBQThCLE1BQTlCO0FBQ1osVUFBSSxLQUFLLENBQUwsSUFBVSxPQUFPLE1BQXJCLEVBQTZCLEtBQUssSUFBTCxDQUFVLEtBQVYsRUFBaUIsTUFBakI7QUFDOUIsS0FyQkQsTUFxQk87QUFDTCxjQUFRLEtBQVIsQ0FBaUIsTUFBTSxHQUFOLENBQVUsSUFBVixXQUF1QixTQUFTLFVBQWhDLE9BQWpCLFNBQW1FLE1BQU0sR0FBTixDQUFVLEtBQVYsQ0FBbkU7QUFDRDtBQUNGLEdBekJEO0FBMEJELENBMUREIiwiZmlsZSI6ImNtZHMvZGF0YW11c2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aGVtZXMgPSByZXF1aXJlKCcuLi90aGVtZXMnKVxuY29uc3QgdG9vbHMgPSByZXF1aXJlKCcuLi90b29scycpXG5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuY29uc3QgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5jb25zdCBuZWVkbGUgPSByZXF1aXJlKCduZWVkbGUnKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuXG5jb25zdCBDRklMRSA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5sZXhpbWF2ZW4ubm9vbmBcblxuZXhwb3J0cy5jb21tYW5kID0gJ2RtdXNlIDxjb25kaXRpb24+J1xuZXhwb3J0cy5kZXNjID0gJ0RhdGFtdXNlIHF1ZXJ5J1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBvdXQ6IHtcbiAgICBhbGlhczogJ28nLFxuICAgIGRlc2M6ICdXcml0ZSBjc29uLCBqc29uLCBub29uLCBwbGlzdCwgeWFtbCwgeG1sJyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgfSxcbiAgZm9yY2U6IHtcbiAgICBhbGlhczogJ2YnLFxuICAgIGRlc2M6ICdGb3JjZSBvdmVyd3JpdGluZyBvdXRmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIHNhdmU6IHtcbiAgICBhbGlhczogJ3MnLFxuICAgIGRlc2M6ICdTYXZlIGZsYWdzIHRvIGNvbmZpZyBmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIG1heDoge1xuICAgIGFsaWFzOiAnbScsXG4gICAgZGVzYzogJ01heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMsIDEgdG8gMTAwMCcsXG4gICAgZGVmYXVsdDogNSxcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgfSxcbn1cbmV4cG9ydHMuaGFuZGxlciA9IChhcmd2KSA9PiB7XG4gIHRvb2xzLmNoZWNrQ29uZmlnKENGSUxFKVxuICBsZXQgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICBjb25zdCB1c2VyQ29uZmlnID0ge1xuICAgIGRtdXNlOiB7XG4gICAgICBtYXg6IGFyZ3YubSxcbiAgICB9LFxuICB9XG4gIGlmIChjb25maWcucHJlZmVyKSBjb25maWcgPSBfLm1lcmdlKHt9LCBjb25maWcsIHVzZXJDb25maWcpXG4gIGNvbnN0IHRoZW1lID0gdGhlbWVzLmxvYWRUaGVtZShjb25maWcudGhlbWUpXG4gIGlmIChjb25maWcudmVyYm9zZSkgdGhlbWVzLmxhYmVsRG93bignRGF0YW11c2UnLCB0aGVtZSwgbnVsbClcbiAgY29uc3QgY2NvbnQgPSBbXVxuICBpZiAoYXJndi5fLmxlbmd0aCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBhcmd2Ll8ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjY29udC5wdXNoKGFyZ3YuX1tpXSlcbiAgICB9XG4gIH1cbiAgY29uc3QgcHJlZml4ID0gJ2h0dHA6Ly9hcGkuZGF0YW11c2UuY29tL3dvcmRzPydcbiAgbGV0IGNvbmRpdGlvbnMgPSBgbWF4PSR7Y29uZmlnLmRtdXNlLm1heH0mYFxuICBfLmVhY2goY2NvbnQsICh2YWx1ZSkgPT4ge1xuICAgIGNvbmRpdGlvbnMgPSBgJHtjb25kaXRpb25zfSYke3ZhbHVlfWBcbiAgfSlcbiAgbGV0IHVybCA9IGAke3ByZWZpeH0ke2NvbmRpdGlvbnN9YFxuICB1cmwgPSBlbmNvZGVVUkkodXJsKVxuICBjb25zdCB0YWdzID0ge1xuICAgIG46ICdub3VuJyxcbiAgICBhZGo6ICdhZGplY3RpdmUnLFxuICAgIGFkdjogJ2FkdmVyYicsXG4gICAgc3luOiAnc3lub255bScsXG4gIH1cbiAgY29uc3QgdG9maWxlID0geyB0eXBlOiAnZGF0YW11c2UnLCBzb3VyY2U6ICdodHRwOi8vZGF0YW11c2UuY29tL2FwaScgfVxuICBjb25zdCBjdHN0eWxlID0gXy5nZXQoY2hhbGssIHRoZW1lLmNvbnRlbnQuc3R5bGUpXG4gIG5lZWRsZS5nZXQodXJsLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKCFlcnJvciAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgIGNvbnN0IHJlc3AgPSByZXNwb25zZS5ib2R5XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSByZXNwLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBjb25zdCBpdGVtID0gcmVzcFtpXVxuICAgICAgICB0aGVtZXMubGFiZWxSaWdodCgnTWF0Y2gnLCB0aGVtZSwgYCR7aXRlbS53b3JkfSBgKVxuICAgICAgICB0b2ZpbGVbW2BtYXRjaCR7aX1gXV0gPSBpdGVtLndvcmRcbiAgICAgICAgaWYgKGl0ZW0udGFncyAhPT0gdW5kZWZpbmVkICYmIGl0ZW0udGFncyAhPT0gW10pIHtcbiAgICAgICAgICB0aGVtZXMubGFiZWxSaWdodCgnVGFncycsIHRoZW1lLCBudWxsKVxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGl0ZW0udGFncy5sZW5ndGggLSAxOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChqID09PSBpdGVtLnRhZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShjdHN0eWxlKGAke3RhZ3NbaXRlbS50YWdzW2pdXX1gKSlcbiAgICAgICAgICAgICAgdG9maWxlW1tgdGFncyR7an1gXV0gPSB0YWdzW2l0ZW0udGFnc1tqXV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCR7dGFnc1tpdGVtLnRhZ3Nbal1dfSwgYCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKCcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJndi5vKSB0b29scy5vdXRGaWxlKGFyZ3YubywgYXJndi5mLCB0b2ZpbGUpXG4gICAgICBpZiAoYXJndi5zICYmIGNvbmZpZy5wcmVmZXIpIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGAke2NoYWxrLnJlZC5ib2xkKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX06YCl9ICR7Y2hhbGsucmVkKGVycm9yKX1gKVxuICAgIH1cbiAgfSlcbn1cbiJdfQ==