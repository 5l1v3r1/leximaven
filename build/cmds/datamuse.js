'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'dmuse <condition>';
exports.desc = 'Datamuse query';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  max: {
    alias: 'm',
    desc: 'Maximum number of results, 1 to 1000',
    default: 5,
    type: 'number'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    dmuse: {
      max: argv.m
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Datamuse', theme, null);
  var ccont = [];
  ccont.push(argv.condition);
  if (argv._.length > 1) {
    for (var i = 1; i <= argv._.length - 1; i++) {
      ccont.push(argv._[i]);
    }
  }
  var prefix = 'http://api.datamuse.com/words?';
  var conditions = 'max=' + config.dmuse.max + '&';
  _.each(ccont, function (value) {
    conditions = conditions + '&' + value;
  });
  var url = '' + prefix + conditions;
  url = encodeURI(url);
  var tags = {
    n: 'noun',
    adj: 'adjective',
    adv: 'adverb',
    syn: 'synonym'
  };
  var tofile = { type: 'datamuse', source: 'http://datamuse.com/api' };
  var ctstyle = _.get(chalk, theme.content.style);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var resp = response.body;
      for (var _i = 0; _i <= resp.length - 1; _i++) {
        var item = resp[_i];
        themes.labelRight('Match', theme, item.word + ' ');
        tofile[['match' + _i]] = item.word;
        if (item.tags !== undefined && item.tags !== []) {
          themes.labelRight('Tags', theme, null);
          for (var j = 0; j <= item.tags.length - 1; j++) {
            if (j === item.tags.length - 1) {
              process.stdout.write(ctstyle('' + tags[item.tags[j]]));
              tofile[['tags' + j]] = tags[item.tags[j]];
            } else {
              process.stdout.write(ctstyle(tags[item.tags[j]] + ', '));
            }
          }
          console.log('');
        }
      }
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.merge) noon.save(CFILE, config);
      if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,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QixLQUFLLElBQUwsQ0FBVSxLQUFWLEVBQWlCLE1BQWpCO0FBQzVCLFVBQUksS0FBSyxDQUFMLElBQVUsQ0FBQyxPQUFPLEtBQXRCLEVBQTZCLFFBQVEsR0FBUixDQUFZLE1BQU0sR0FBTixDQUFVLDJCQUFWLENBQVo7QUFDOUIsS0F0QkQsTUFzQk87QUFDTCxjQUFRLEtBQVIsQ0FBaUIsTUFBTSxHQUFOLENBQVUsSUFBVixXQUF1QixTQUFTLFVBQWhDLE9BQWpCLFNBQW1FLE1BQU0sR0FBTixDQUFVLEtBQVYsQ0FBbkU7QUFDRDtBQUNGLEdBMUJEO0FBMkJELENBNUREIiwiZmlsZSI6ImNtZHMvZGF0YW11c2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aGVtZXMgPSByZXF1aXJlKCcuLi90aGVtZXMnKVxuY29uc3QgdG9vbHMgPSByZXF1aXJlKCcuLi90b29scycpXG5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuY29uc3QgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5jb25zdCBuZWVkbGUgPSByZXF1aXJlKCduZWVkbGUnKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuXG5jb25zdCBDRklMRSA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5sZXhpbWF2ZW4ubm9vbmBcblxuZXhwb3J0cy5jb21tYW5kID0gJ2RtdXNlIDxjb25kaXRpb24+J1xuZXhwb3J0cy5kZXNjID0gJ0RhdGFtdXNlIHF1ZXJ5J1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBvdXQ6IHtcbiAgICBhbGlhczogJ28nLFxuICAgIGRlc2M6ICdXcml0ZSBjc29uLCBqc29uLCBub29uLCBwbGlzdCwgeWFtbCwgeG1sJyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgfSxcbiAgZm9yY2U6IHtcbiAgICBhbGlhczogJ2YnLFxuICAgIGRlc2M6ICdGb3JjZSBvdmVyd3JpdGluZyBvdXRmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIHNhdmU6IHtcbiAgICBhbGlhczogJ3MnLFxuICAgIGRlc2M6ICdTYXZlIGZsYWdzIHRvIGNvbmZpZyBmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIG1heDoge1xuICAgIGFsaWFzOiAnbScsXG4gICAgZGVzYzogJ01heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMsIDEgdG8gMTAwMCcsXG4gICAgZGVmYXVsdDogNSxcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgfSxcbn1cbmV4cG9ydHMuaGFuZGxlciA9IChhcmd2KSA9PiB7XG4gIHRvb2xzLmNoZWNrQ29uZmlnKENGSUxFKVxuICBsZXQgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICBjb25zdCB1c2VyQ29uZmlnID0ge1xuICAgIGRtdXNlOiB7XG4gICAgICBtYXg6IGFyZ3YubSxcbiAgICB9LFxuICB9XG4gIGlmIChjb25maWcubWVyZ2UpIGNvbmZpZyA9IF8ubWVyZ2Uoe30sIGNvbmZpZywgdXNlckNvbmZpZylcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGNvbmZpZy52ZXJib3NlKSB0aGVtZXMubGFiZWxEb3duKCdEYXRhbXVzZScsIHRoZW1lLCBudWxsKVxuICBjb25zdCBjY29udCA9IFtdXG4gIGNjb250LnB1c2goYXJndi5jb25kaXRpb24pXG4gIGlmIChhcmd2Ll8ubGVuZ3RoID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGFyZ3YuXy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGNjb250LnB1c2goYXJndi5fW2ldKVxuICAgIH1cbiAgfVxuICBjb25zdCBwcmVmaXggPSAnaHR0cDovL2FwaS5kYXRhbXVzZS5jb20vd29yZHM/J1xuICBsZXQgY29uZGl0aW9ucyA9IGBtYXg9JHtjb25maWcuZG11c2UubWF4fSZgXG4gIF8uZWFjaChjY29udCwgKHZhbHVlKSA9PiB7XG4gICAgY29uZGl0aW9ucyA9IGAke2NvbmRpdGlvbnN9JiR7dmFsdWV9YFxuICB9KVxuICBsZXQgdXJsID0gYCR7cHJlZml4fSR7Y29uZGl0aW9uc31gXG4gIHVybCA9IGVuY29kZVVSSSh1cmwpXG4gIGNvbnN0IHRhZ3MgPSB7XG4gICAgbjogJ25vdW4nLFxuICAgIGFkajogJ2FkamVjdGl2ZScsXG4gICAgYWR2OiAnYWR2ZXJiJyxcbiAgICBzeW46ICdzeW5vbnltJyxcbiAgfVxuICBjb25zdCB0b2ZpbGUgPSB7IHR5cGU6ICdkYXRhbXVzZScsIHNvdXJjZTogJ2h0dHA6Ly9kYXRhbXVzZS5jb20vYXBpJyB9XG4gIGNvbnN0IGN0c3R5bGUgPSBfLmdldChjaGFsaywgdGhlbWUuY29udGVudC5zdHlsZSlcbiAgbmVlZGxlLmdldCh1cmwsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgY29uc3QgcmVzcCA9IHJlc3BvbnNlLmJvZHlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHJlc3AubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSByZXNwW2ldXG4gICAgICAgIHRoZW1lcy5sYWJlbFJpZ2h0KCdNYXRjaCcsIHRoZW1lLCBgJHtpdGVtLndvcmR9IGApXG4gICAgICAgIHRvZmlsZVtbYG1hdGNoJHtpfWBdXSA9IGl0ZW0ud29yZFxuICAgICAgICBpZiAoaXRlbS50YWdzICE9PSB1bmRlZmluZWQgJiYgaXRlbS50YWdzICE9PSBbXSkge1xuICAgICAgICAgIHRoZW1lcy5sYWJlbFJpZ2h0KCdUYWdzJywgdGhlbWUsIG51bGwpXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gaXRlbS50YWdzLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICAgICAgaWYgKGogPT09IGl0ZW0udGFncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCR7dGFnc1tpdGVtLnRhZ3Nbal1dfWApKVxuICAgICAgICAgICAgICB0b2ZpbGVbW2B0YWdzJHtqfWBdXSA9IHRhZ3NbaXRlbS50YWdzW2pdXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY3RzdHlsZShgJHt0YWdzW2l0ZW0udGFnc1tqXV19LCBgKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS5sb2coJycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhcmd2Lm8pIHRvb2xzLm91dEZpbGUoYXJndi5vLCBhcmd2LmYsIHRvZmlsZSlcbiAgICAgIGlmIChhcmd2LnMgJiYgY29uZmlnLm1lcmdlKSBub29uLnNhdmUoQ0ZJTEUsIGNvbmZpZylcbiAgICAgIGlmIChhcmd2LnMgJiYgIWNvbmZpZy5tZXJnZSkgY29uc29sZS5lcnIoY2hhbGsucmVkKCdTZXQgb3B0aW9uIG1lcmdlIHRvIHRydWUhJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y2hhbGsucmVkLmJvbGQoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXNDb2RlfTpgKX0gJHtjaGFsay5yZWQoZXJyb3IpfWApXG4gICAgfVxuICB9KVxufVxuIl19