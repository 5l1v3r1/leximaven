'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var themes = require('../../themes');

var chalk = require('chalk');
var fs = require('fs');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';
var PKGDIR = process.env.NODE_PATH + '/leximaven/';

exports.command = 'init';
exports.desc = 'Initialize config file';
exports.builder = {
  force: {
    alias: 'f',
    desc: 'Force overwriting configuration file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  var obj = null;
  var configExists = null;
  var dirExists = null;
  try {
    fs.statSync('default.config.noon');
    configExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') configExists = false;
  }
  if (configExists) {
    obj = noon.load('default.config.noon');
  } else {
    try {
      fs.statSync(PKGDIR);
      dirExists = true;
    } catch (e) {
      if (e.code === 'ENOENT') {
        dirExists = false;
      }
    }
    if (dirExists) {
      obj = noon.load(PKGDIR + 'default.config.noon');
    } else {
      throw new Error('Package dir not found, set NODE_PATH per documentation.');
    }
  }
  obj.dmuse.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.onelook.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.rbrain.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.wordnik.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  var fileExists = null;
  try {
    fs.statSync(CFILE);
    fileExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileExists = false;
    }
  }
  if (fileExists) {
    if (argv.f) {
      var _config = noon.load(CFILE);
      obj.dmuse.date.stamp = _config.dmuse.date.stamp;
      obj.dmuse.date.remain = _config.dmuse.date.remain;
      obj.onelook.date.stamp = _config.onelook.date.stamp;
      obj.onelook.date.remain = _config.onelook.date.remain;
      obj.rbrain.date.stamp = _config.rbrain.date.stamp;
      obj.rbrain.date.remain = _config.rbrain.date.remain;
      obj.wordnik.date.stamp = _config.wordnik.date.stamp;
      obj.wordnik.date.remain = _config.wordnik.date.remain;
      noon.save(CFILE, obj);
      console.log('Overwrote ' + chalk.white.bold(CFILE) + '.');
    } else {
      console.log('Using configuration at ' + chalk.white.bold(CFILE) + '.');
    }
  } else if (!fileExists) {
    noon.save(CFILE, obj);
    console.log('Created ' + chalk.white.bold(CFILE) + '.');
  }
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (argv.v) {
    themes.label(theme, 'down', 'Configuration');
    console.log('Your current configuration is:');
    console.log(noon.stringify(config, {
      indent: 2,
      align: true,
      maxalign: 32,
      sort: true,
      colors: true
    }));
    console.log('');
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQU0sU0FBUyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNLEtBQUssUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNLE9BQU8sUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTSxRQUFXLFFBQVEsR0FBUixDQUFZLElBQXZCLHFCQUFOO0FBQ0EsSUFBTSxTQUFZLFFBQVEsR0FBUixDQUFZLFNBQXhCLGdCQUFOOztBQUVBLFFBQVEsT0FBUixHQUFrQixNQUFsQjtBQUNBLFFBQVEsSUFBUixHQUFlLHdCQUFmO0FBQ0EsUUFBUSxPQUFSLEdBQWtCO0FBQ2hCLFNBQU87QUFDTCxXQUFPLEdBREY7QUFFTCxVQUFNLHNDQUZEO0FBR0wsYUFBUyxLQUhKO0FBSUwsVUFBTTtBQUpEO0FBRFMsQ0FBbEI7QUFRQSxRQUFRLE9BQVIsR0FBa0IsVUFBQyxJQUFELEVBQVU7QUFDMUIsTUFBSSxNQUFNLElBQVY7QUFDQSxNQUFJLGVBQWUsSUFBbkI7QUFDQSxNQUFJLFlBQVksSUFBaEI7QUFDQSxNQUFJO0FBQ0YsT0FBRyxRQUFILENBQVkscUJBQVo7QUFDQSxtQkFBZSxJQUFmO0FBQ0QsR0FIRCxDQUdFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsUUFBSSxFQUFFLElBQUYsS0FBVyxRQUFmLEVBQXlCLGVBQWUsS0FBZjtBQUMxQjtBQUNELE1BQUksWUFBSixFQUFrQjtBQUNoQixVQUFNLEtBQUssSUFBTCxDQUFVLHFCQUFWLENBQU47QUFDRCxHQUZELE1BRU87QUFDTCxRQUFJO0FBQ0YsU0FBRyxRQUFILENBQVksTUFBWjtBQUNBLGtCQUFZLElBQVo7QUFDRCxLQUhELENBR0UsT0FBTyxDQUFQLEVBQVU7QUFDVixVQUFJLEVBQUUsSUFBRixLQUFXLFFBQWYsRUFBeUI7QUFDdkIsb0JBQVksS0FBWjtBQUNEO0FBQ0Y7QUFD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SyxDQUFULEVBQVk7QUFDVixXQUFPLEtBQVAsQ0FBYSxLQUFiLEVBQW9CLE1BQXBCLEVBQTRCLGVBQTVCO0FBQ0EsWUFBUSxHQUFSLENBQVksZ0NBQVo7QUFDQSxZQUFRLEdBQVIsQ0FBWSxLQUFLLFNBQUwsQ0FBZSxNQUFmLEVBQXVCO0FBQ2pDLGNBQVEsQ0FEeUI7QUFFakMsYUFBTyxJQUYwQjtBQUdqQyxnQkFBVSxFQUh1QjtBQUlqQyxZQUFNLElBSjJCO0FBS2pDLGNBQVE7QUFMeUIsS0FBdkIsQ0FBWjtBQU9BLFlBQVEsR0FBUixDQUFZLEVBQVo7QUFDRDtBQUNGLENBMUVEIiwiZmlsZSI6ImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uLy4uL3RoZW1lcycpXG5cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuY29uc3QgUEtHRElSID0gYCR7cHJvY2Vzcy5lbnYuTk9ERV9QQVRIfS9sZXhpbWF2ZW4vYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnaW5pdCdcbmV4cG9ydHMuZGVzYyA9ICdJbml0aWFsaXplIGNvbmZpZyBmaWxlJ1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBmb3JjZToge1xuICAgIGFsaWFzOiAnZicsXG4gICAgZGVzYzogJ0ZvcmNlIG92ZXJ3cml0aW5nIGNvbmZpZ3VyYXRpb24gZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgbGV0IG9iaiA9IG51bGxcbiAgbGV0IGNvbmZpZ0V4aXN0cyA9IG51bGxcbiAgbGV0IGRpckV4aXN0cyA9IG51bGxcbiAgdHJ5IHtcbiAgICBmcy5zdGF0U3luYygnZGVmYXVsdC5jb25maWcubm9vbicpXG4gICAgY29uZmlnRXhpc3RzID0gdHJ1ZVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIGNvbmZpZ0V4aXN0cyA9IGZhbHNlXG4gIH1cbiAgaWYgKGNvbmZpZ0V4aXN0cykge1xuICAgIG9iaiA9IG5vb24ubG9hZCgnZGVmYXVsdC5jb25maWcubm9vbicpXG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGZzLnN0YXRTeW5jKFBLR0RJUilcbiAgICAgIGRpckV4aXN0cyA9IHRydWVcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICBkaXJFeGlzdHMgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGlyRXhpc3RzKSB7XG4gICAgICBvYmogPSBub29uLmxvYWQoYCR7UEtHRElSfWRlZmF1bHQuY29uZmlnLm5vb25gKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhY2thZ2UgZGlyIG5vdCBmb3VuZCwgc2V0IE5PREVfUEFUSCBwZXIgZG9jdW1lbnRhdGlvbi4nKVxuICAgIH1cbiAgfVxuICBvYmouZG11c2UuZGF0ZS5zdGFtcCA9IEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpLnJlcGxhY2UoL1wiL21pZywgJycpXG4gIG9iai5vbmVsb29rLmRhdGUuc3RhbXAgPSBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZSgpKS5yZXBsYWNlKC9cIi9taWcsICcnKVxuICBvYmoucmJyYWluLmRhdGUuc3RhbXAgPSBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZSgpKS5yZXBsYWNlKC9cIi9taWcsICcnKVxuICBvYmoud29yZG5pay5kYXRlLnN0YW1wID0gSlNPTi5zdHJpbmdpZnkobmV3IERhdGUoKSkucmVwbGFjZSgvXCIvbWlnLCAnJylcbiAgbGV0IGZpbGVFeGlzdHMgPSBudWxsXG4gIHRyeSB7XG4gICAgZnMuc3RhdFN5bmMoQ0ZJTEUpXG4gICAgZmlsZUV4aXN0cyA9IHRydWVcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICBmaWxlRXhpc3RzID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgaWYgKGZpbGVFeGlzdHMpIHtcbiAgICBpZiAoYXJndi5mKSB7XG4gICAgICBjb25zdCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gICAgICBvYmouZG11c2UuZGF0ZS5zdGFtcCA9IGNvbmZpZy5kbXVzZS5kYXRlLnN0YW1wXG4gICAgICBvYmouZG11c2UuZGF0ZS5yZW1haW4gPSBjb25maWcuZG11c2UuZGF0ZS5yZW1haW5cbiAgICAgIG9iai5vbmVsb29rLmRhdGUuc3RhbXAgPSBjb25maWcub25lbG9vay5kYXRlLnN0YW1wXG4gICAgICBvYmoub25lbG9vay5kYXRlLnJlbWFpbiA9IGNvbmZpZy5vbmVsb29rLmRhdGUucmVtYWluXG4gICAgICBvYmoucmJyYWluLmRhdGUuc3RhbXAgPSBjb25maWcucmJyYWluLmRhdGUuc3RhbXBcbiAgICAgIG9iai5yYnJhaW4uZGF0ZS5yZW1haW4gPSBjb25maWcucmJyYWluLmRhdGUucmVtYWluXG4gICAgICBvYmoud29yZG5pay5kYXRlLnN0YW1wID0gY29uZmlnLndvcmRuaWsuZGF0ZS5zdGFtcFxuICAgICAgb2JqLndvcmRuaWsuZGF0ZS5yZW1haW4gPSBjb25maWcud29yZG5pay5kYXRlLnJlbWFpblxuICAgICAgbm9vbi5zYXZlKENGSUxFLCBvYmopXG4gICAgICBjb25zb2xlLmxvZyhgT3Zlcndyb3RlICR7Y2hhbGsud2hpdGUuYm9sZChDRklMRSl9LmApXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBVc2luZyBjb25maWd1cmF0aW9uIGF0ICR7Y2hhbGsud2hpdGUuYm9sZChDRklMRSl9LmApXG4gICAgfVxuICB9IGVsc2UgaWYgKCFmaWxlRXhpc3RzKSB7XG4gICAgbm9vbi5zYXZlKENGSUxFLCBvYmopXG4gICAgY29uc29sZS5sb2coYENyZWF0ZWQgJHtjaGFsay53aGl0ZS5ib2xkKENGSUxFKX0uYClcbiAgfVxuICBjb25zdCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gIGNvbnN0IHRoZW1lID0gdGhlbWVzLmxvYWRUaGVtZShjb25maWcudGhlbWUpXG4gIGlmIChhcmd2LnYpIHtcbiAgICB0aGVtZXMubGFiZWwodGhlbWUsICdkb3duJywgJ0NvbmZpZ3VyYXRpb24nKVxuICAgIGNvbnNvbGUubG9nKCdZb3VyIGN1cnJlbnQgY29uZmlndXJhdGlvbiBpczonKVxuICAgIGNvbnNvbGUubG9nKG5vb24uc3RyaW5naWZ5KGNvbmZpZywge1xuICAgICAgaW5kZW50OiAyLFxuICAgICAgYWxpZ246IHRydWUsXG4gICAgICBtYXhhbGlnbjogMzIsXG4gICAgICBzb3J0OiB0cnVlLFxuICAgICAgY29sb3JzOiB0cnVlLFxuICAgIH0pKVxuICAgIGNvbnNvbGUubG9nKCcnKVxuICB9XG59XG4iXX0=