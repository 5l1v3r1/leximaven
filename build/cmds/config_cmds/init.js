'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var themes = require('../../themes');

var chalk = require('chalk');
var fs = require('fs');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';
var PKGDIR = process.env.NODE_PATH + '/leximaven/';

exports.command = 'init';
exports.desc = 'Initialize config file';
exports.builder = {
  force: {
    alias: 'f',
    desc: 'Force overwriting configuration file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  var obj = null;
  var configExists = null;
  var dirExists = null;
  try {
    fs.statSync('default.config.noon');
    configExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') configExists = false;
  }
  if (configExists) {
    obj = noon.load('default.config.noon');
  } else {
    try {
      fs.statSync(PKGDIR);
      dirExists = true;
    } catch (e) {
      if (e.code === 'ENOENT') {
        dirExists = false;
      }
    }
    if (dirExists) {
      obj = noon.load(PKGDIR + 'default.config.noon');
    } else {
      throw new Error('Package dir not found, set NODE_PATH per documentation.');
    }
  }
  obj.dmuse.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.onelook.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.rbrain.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.wordnik.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  var fileExists = null;
  try {
    fs.statSync(CFILE);
    fileExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileExists = false;
    }
  }
  if (fileExists) {
    if (argv.f) {
      var _config = noon.load(CFILE);
      obj.dmuse.date.stamp = _config.dmuse.date.stamp;
      obj.dmuse.date.remain = _config.dmuse.date.remain;
      obj.onelook.date.stamp = _config.onelook.date.stamp;
      obj.onelook.date.remain = _config.onelook.date.remain;
      obj.rbrain.date.stamp = _config.rbrain.date.stamp;
      obj.rbrain.date.remain = _config.rbrain.date.remain;
      obj.wordnik.date.stamp = _config.wordnik.date.stamp;
      obj.wordnik.date.remain = _config.wordnik.date.remain;
      noon.save(CFILE, obj);
      console.log('Overwrote ' + chalk.white.bold(CFILE) + '.');
    } else {
      console.log('Using configuration at ' + chalk.white.bold(CFILE) + '.');
    }
  } else if (!fileExists) {
    noon.save(CFILE, obj);
    console.log('Created ' + chalk.white.bold(CFILE) + '.');
  }
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (argv.v) {
    themes.labelDown('Configuration', theme, null);
    console.log('Your current configuration is:');
    console.log(noon.stringify(config, {
      indent: 2,
      align: true,
      maxalign: 32,
      sort: true,
      colors: true
    }));
    console.log('');
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQU0sU0FBUyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNLEtBQUssUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNLE9BQU8sUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTSxRQUFXLFFBQVEsR0FBUixDQUFZLElBQXZCLHFCQUFOO0FBQ0EsSUFBTSxTQUFZLFFBQVEsR0FBUixDQUFZLFNBQXhCLGdCQUFOOztBQUVBLFFBQVEsT0FBUixHQUFrQixNQUFsQjtBQUNBLFFBQVEsSUFBUixHQUFlLHdCQUFmO0FBQ0EsUUFBUSxPQUFSLEdBQWtCO0FBQ2hCLFNBQU87QUFDTCxXQUFPLEdBREY7QUFFTCxVQUFNLHNDQUZEO0FBR0wsYUFBUyxLQUhKO0FBSUwsVUFBTTtBQUpEO0FBRFMsQ0FBbEI7QUFRQSxRQUFRLE9BQVIsR0FBa0IsVUFBQyxJQUFELEVBQVU7QUFDMUIsTUFBSSxNQUFNLElBQVY7QUFDQSxNQUFJLGVBQWUsSUFBbkI7QUFDQSxNQUFJLFlBQVksSUFBaEI7QUFDQSxNQUFJO0FBQ0YsT0FBRyxRQUFILENBQVkscUJBQVo7QUFDQSxtQkFBZSxJQUFmO0FBQ0QsR0FIRCxDQUdFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsUUFBSSxFQUFFLElBQUYsS0FBVyxRQUFmLEVBQXlCLGVBQWUsS0FBZjtBQUMxQjtBQUNELE1BQUksWUFBSixFQUFrQjtBQUNoQixVQUFNLEtBQUssSUFBTCxDQUFVLHFCQUFWLENBQU47QUFDRCxHQUZELE1BRU87QUFDTCxRQUFJO0FBQ0YsU0FBRyxRQUFILENBQVksTUFBWjtBQUNBLGtCQUFZLElBQVo7QUFDRCxLQUhELENBR0UsT0FBTyxDQUFQLEVBQVU7QUFDVixVQUFJLEVBQUUsSUFBRixLQUFXLFFBQWYsRUFBeUI7QUFDdkIsb0JBQVksS0FBWjtBQUNEO0FBQ0Y7QUFD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SyxDQUFULEVBQVk7QUFDVixXQUFPLFNBQVAsQ0FBaUIsZUFBakIsRUFBa0MsS0FBbEMsRUFBeUMsSUFBekM7QUFDQSxZQUFRLEdBQVIsQ0FBWSxnQ0FBWjtBQUNBLFlBQVEsR0FBUixDQUFZLEtBQUssU0FBTCxDQUFlLE1BQWYsRUFBdUI7QUFDakMsY0FBUSxDQUR5QjtBQUVqQyxhQUFPLElBRjBCO0FBR2pDLGdCQUFVLEVBSHVCO0FBSWpDLFlBQU0sSUFKMkI7QUFLakMsY0FBUTtBQUx5QixLQUF2QixDQUFaO0FBT0EsWUFBUSxHQUFSLENBQVksRUFBWjtBQUNEO0FBQ0YsQ0ExRUQiLCJmaWxlIjoiY21kcy9jb25maWdfY21kcy9pbml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhlbWVzID0gcmVxdWlyZSgnLi4vLi4vdGhlbWVzJylcblxuY29uc3QgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IG5vb24gPSByZXF1aXJlKCdub29uJylcblxuY29uc3QgQ0ZJTEUgPSBgJHtwcm9jZXNzLmVudi5IT01FfS8ubGV4aW1hdmVuLm5vb25gXG5jb25zdCBQS0dESVIgPSBgJHtwcm9jZXNzLmVudi5OT0RFX1BBVEh9L2xleGltYXZlbi9gXG5cbmV4cG9ydHMuY29tbWFuZCA9ICdpbml0J1xuZXhwb3J0cy5kZXNjID0gJ0luaXRpYWxpemUgY29uZmlnIGZpbGUnXG5leHBvcnRzLmJ1aWxkZXIgPSB7XG4gIGZvcmNlOiB7XG4gICAgYWxpYXM6ICdmJyxcbiAgICBkZXNjOiAnRm9yY2Ugb3ZlcndyaXRpbmcgY29uZmlndXJhdGlvbiBmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG59XG5leHBvcnRzLmhhbmRsZXIgPSAoYXJndikgPT4ge1xuICBsZXQgb2JqID0gbnVsbFxuICBsZXQgY29uZmlnRXhpc3RzID0gbnVsbFxuICBsZXQgZGlyRXhpc3RzID0gbnVsbFxuICB0cnkge1xuICAgIGZzLnN0YXRTeW5jKCdkZWZhdWx0LmNvbmZpZy5ub29uJylcbiAgICBjb25maWdFeGlzdHMgPSB0cnVlXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykgY29uZmlnRXhpc3RzID0gZmFsc2VcbiAgfVxuICBpZiAoY29uZmlnRXhpc3RzKSB7XG4gICAgb2JqID0gbm9vbi5sb2FkKCdkZWZhdWx0LmNvbmZpZy5ub29uJylcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgZnMuc3RhdFN5bmMoUEtHRElSKVxuICAgICAgZGlyRXhpc3RzID0gdHJ1ZVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIGRpckV4aXN0cyA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkaXJFeGlzdHMpIHtcbiAgICAgIG9iaiA9IG5vb24ubG9hZChgJHtQS0dESVJ9ZGVmYXVsdC5jb25maWcubm9vbmApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGFja2FnZSBkaXIgbm90IGZvdW5kLCBzZXQgTk9ERV9QQVRIIHBlciBkb2N1bWVudGF0aW9uLicpXG4gICAgfVxuICB9XG4gIG9iai5kbXVzZS5kYXRlLnN0YW1wID0gSlNPTi5zdHJpbmdpZnkobmV3IERhdGUoKSkucmVwbGFjZSgvXCIvbWlnLCAnJylcbiAgb2JqLm9uZWxvb2suZGF0ZS5zdGFtcCA9IEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpLnJlcGxhY2UoL1wiL21pZywgJycpXG4gIG9iai5yYnJhaW4uZGF0ZS5zdGFtcCA9IEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpLnJlcGxhY2UoL1wiL21pZywgJycpXG4gIG9iai53b3JkbmlrLmRhdGUuc3RhbXAgPSBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZSgpKS5yZXBsYWNlKC9cIi9taWcsICcnKVxuICBsZXQgZmlsZUV4aXN0cyA9IG51bGxcbiAgdHJ5IHtcbiAgICBmcy5zdGF0U3luYyhDRklMRSlcbiAgICBmaWxlRXhpc3RzID0gdHJ1ZVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIGZpbGVFeGlzdHMgPSBmYWxzZVxuICAgIH1cbiAgfVxuICBpZiAoZmlsZUV4aXN0cykge1xuICAgIGlmIChhcmd2LmYpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgICAgIG9iai5kbXVzZS5kYXRlLnN0YW1wID0gY29uZmlnLmRtdXNlLmRhdGUuc3RhbXBcbiAgICAgIG9iai5kbXVzZS5kYXRlLnJlbWFpbiA9IGNvbmZpZy5kbXVzZS5kYXRlLnJlbWFpblxuICAgICAgb2JqLm9uZWxvb2suZGF0ZS5zdGFtcCA9IGNvbmZpZy5vbmVsb29rLmRhdGUuc3RhbXBcbiAgICAgIG9iai5vbmVsb29rLmRhdGUucmVtYWluID0gY29uZmlnLm9uZWxvb2suZGF0ZS5yZW1haW5cbiAgICAgIG9iai5yYnJhaW4uZGF0ZS5zdGFtcCA9IGNvbmZpZy5yYnJhaW4uZGF0ZS5zdGFtcFxuICAgICAgb2JqLnJicmFpbi5kYXRlLnJlbWFpbiA9IGNvbmZpZy5yYnJhaW4uZGF0ZS5yZW1haW5cbiAgICAgIG9iai53b3JkbmlrLmRhdGUuc3RhbXAgPSBjb25maWcud29yZG5pay5kYXRlLnN0YW1wXG4gICAgICBvYmoud29yZG5pay5kYXRlLnJlbWFpbiA9IGNvbmZpZy53b3JkbmlrLmRhdGUucmVtYWluXG4gICAgICBub29uLnNhdmUoQ0ZJTEUsIG9iailcbiAgICAgIGNvbnNvbGUubG9nKGBPdmVyd3JvdGUgJHtjaGFsay53aGl0ZS5ib2xkKENGSUxFKX0uYClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFVzaW5nIGNvbmZpZ3VyYXRpb24gYXQgJHtjaGFsay53aGl0ZS5ib2xkKENGSUxFKX0uYClcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWZpbGVFeGlzdHMpIHtcbiAgICBub29uLnNhdmUoQ0ZJTEUsIG9iailcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCAke2NoYWxrLndoaXRlLmJvbGQoQ0ZJTEUpfS5gKVxuICB9XG4gIGNvbnN0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGFyZ3Yudikge1xuICAgIHRoZW1lcy5sYWJlbERvd24oJ0NvbmZpZ3VyYXRpb24nLCB0aGVtZSwgbnVsbClcbiAgICBjb25zb2xlLmxvZygnWW91ciBjdXJyZW50IGNvbmZpZ3VyYXRpb24gaXM6JylcbiAgICBjb25zb2xlLmxvZyhub29uLnN0cmluZ2lmeShjb25maWcsIHtcbiAgICAgIGluZGVudDogMixcbiAgICAgIGFsaWduOiB0cnVlLFxuICAgICAgbWF4YWxpZ246IDMyLFxuICAgICAgc29ydDogdHJ1ZSxcbiAgICAgIGNvbG9yczogdHJ1ZSxcbiAgICB9KSlcbiAgICBjb25zb2xlLmxvZygnJylcbiAgfVxufVxuIl19