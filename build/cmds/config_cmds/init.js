'use strict';

var themes = require('../../themes');

var chalk = require('chalk');
var fs = require('fs');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'init';
exports.desc = 'Initialize config file';
exports.builder = {
  force: {
    alias: 'f',
    desc: 'Force overwriting configuration file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  var obj = noon.load('default.config.noon');
  var fileExists = null;
  try {
    fs.statSync(CFILE);
    fileExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileExists = false;
    }
  }
  if (fileExists) {
    if (argv.f) {
      console.log('Overwrote ' + chalk.white.bold(CFILE) + '.');
      noon.save(CFILE, obj);
    } else {
      console.log('Using configuration at ' + chalk.white.bold(CFILE) + '.');
    }
  } else if (!fileExists) {
    console.log('Created ' + chalk.white.bold(CFILE) + '.');
    noon.save(CFILE, obj);
  }
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Configuration', theme, null);
  console.log('Your current configuration is:');
  console.log(noon.stringify(config, {
    indent: 2,
    align: true,
    maxalign: 32,
    sort: true,
    colors: true
  }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sU0FBUyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNLEtBQUssUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNLE9BQU8sUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTSxRQUFXLFFBQVEsR0FBUixDQUFZLElBQXZCLHFCQUFOOztBQUVBLFFBQVEsT0FBUixHQUFrQixNQUFsQjtBQUNBLFFBQVEsSUFBUixHQUFlLHdCQUFmO0FBQ0EsUUFBUSxPQUFSLEdBQWtCO0FBQ2hCLFNBQU87QUFDTCxXQUFPLEdBREY7QUFFTCxVQUFNLHNDQUZEO0FBR0wsYUFBUyxLQUhKO0FBSUwsVUFBTTtBQUpEO0FBRFMsQ0FBbEI7QUFRQSxRQUFRLE9BQVIsR0FBa0IsVUFBQyxJQUFELEVBQVU7QUFDMUIsTUFBTSxNQUFNLEtBQUssSUFBTCxDQUFVLHFCQUFWLENBQVo7QUFDQSxNQUFJLGFBQWEsSUFBakI7QUFDQSxNQUFJO0FBQ0YsT0FBRyxRQUFILENBQVksS0FBWjtBQUNBLGlCQUFhLElBQWI7QUFDRCxHQUhELENBR0UsT0FBTyxDQUFQLEVBQVU7QUFDVixRQUFJLEVBQUUsSUFBRixLQUFXLFFBQWYsRUFBeUI7QUFDdkIsbUJBQWEsS0FBYjtBQUNEO0FBQ0Y7QUFDRCxNQUFJLFVBQUosRUFBZ0I7QUFDZCxRQUFJLEtBQUssQ0FBVCxFQUFZO0FBQ1YsY0FBUSxHQUFSLGdCQUF5QixNQUFNLEtBQU4sQ0FBWSxJQUFaLENBQWlCLEtBQWpCLENBQXpCO0FBQ0EsV0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQixHQUFqQjtBQUNELEtBSEQsTUFHTztBQUNMLGNBQVEsR0FBUiw2QkFBc0MsTUFBTSxLQUFOLENBQVksSUFBWixDQUFpQixLQUFqQixDQUF0QztBQUNEO0FBQ0YsR0FQRCxNQU9PLElBQUksQ0FBQyxVQUFMLEVBQWlCO0FBQ3RCLFlBQVEsR0FBUixjQUF1QixNQUFNLEtBQU4sQ0FBWSxJQUFaLENBQWlCLEtBQWpCLENBQXZCO0FBQ0EsU0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQixHQUFqQjtBQUNEO0FBQ0QsTUFBTSxTQUFTLEtBQUssSUFBTCxDQUFVLEtBQVYsQ0FBZjtBQUNBLE1BQU0sUUFBUSxPQUFPLFNBQVAsQ0FBaUIsT0FBTyxLQUF4QixDQUFkO0FBQ0EsTUFBSSxPQUFPLE9BQVgsRUFBb0IsT0FBTyxTQUFQLENBQWlCLGVBQWpCLEVBQWtDLEtBQWxDLEVBQXlDLElBQXpDO0FBQ3BCLFVBQVEsR0FBUixDQUFZLGdDQUFaO0FBQ0EsVUFBUSxHQUFSLENBQVksS0FBSyxTQUFMLENBQWUsTUFBZixFQUF1QjtBQUNqQyxZQUFRLENBRHlCO0FBRWpDLFdBQU8sSUFGMEI7QUFHakMsY0FBVSxFQUh1QjtBQUlqQyxVQUFNLElBSjJCO0FBS2pDLFlBQVE7QUFMeUIsR0FBdkIsQ0FBWjtBQU9ELENBakNEIiwiZmlsZSI6ImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uLy4uL3RoZW1lcycpXG5cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnaW5pdCdcbmV4cG9ydHMuZGVzYyA9ICdJbml0aWFsaXplIGNvbmZpZyBmaWxlJ1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBmb3JjZToge1xuICAgIGFsaWFzOiAnZicsXG4gICAgZGVzYzogJ0ZvcmNlIG92ZXJ3cml0aW5nIGNvbmZpZ3VyYXRpb24gZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgY29uc3Qgb2JqID0gbm9vbi5sb2FkKCdkZWZhdWx0LmNvbmZpZy5ub29uJylcbiAgbGV0IGZpbGVFeGlzdHMgPSBudWxsXG4gIHRyeSB7XG4gICAgZnMuc3RhdFN5bmMoQ0ZJTEUpXG4gICAgZmlsZUV4aXN0cyA9IHRydWVcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICBmaWxlRXhpc3RzID0gZmFsc2VcbiAgICB9XG4gIH1cbiAgaWYgKGZpbGVFeGlzdHMpIHtcbiAgICBpZiAoYXJndi5mKSB7XG4gICAgICBjb25zb2xlLmxvZyhgT3Zlcndyb3RlICR7Y2hhbGsud2hpdGUuYm9sZChDRklMRSl9LmApXG4gICAgICBub29uLnNhdmUoQ0ZJTEUsIG9iailcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFVzaW5nIGNvbmZpZ3VyYXRpb24gYXQgJHtjaGFsay53aGl0ZS5ib2xkKENGSUxFKX0uYClcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWZpbGVFeGlzdHMpIHtcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCAke2NoYWxrLndoaXRlLmJvbGQoQ0ZJTEUpfS5gKVxuICAgIG5vb24uc2F2ZShDRklMRSwgb2JqKVxuICB9XG4gIGNvbnN0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGNvbmZpZy52ZXJib3NlKSB0aGVtZXMubGFiZWxEb3duKCdDb25maWd1cmF0aW9uJywgdGhlbWUsIG51bGwpXG4gIGNvbnNvbGUubG9nKCdZb3VyIGN1cnJlbnQgY29uZmlndXJhdGlvbiBpczonKVxuICBjb25zb2xlLmxvZyhub29uLnN0cmluZ2lmeShjb25maWcsIHtcbiAgICBpbmRlbnQ6IDIsXG4gICAgYWxpZ246IHRydWUsXG4gICAgbWF4YWxpZ246IDMyLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgY29sb3JzOiB0cnVlLFxuICB9KSlcbn1cbiJdfQ==