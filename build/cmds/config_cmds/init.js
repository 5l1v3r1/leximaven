'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var themes = require('../../themes');

var chalk = require('chalk');
var fs = require('fs');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';
var PKGDIR = process.env.NODE_PATH + '/leximaven/';

exports.command = 'init';
exports.desc = 'Initialize config file';
exports.builder = {
  force: {
    alias: 'f',
    desc: 'Force overwriting configuration file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  var dirExists = null;
  try {
    fs.statSync(PKGDIR);
    dirExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') {
      dirExists = false;
    }
  }
  var obj = null;
  if (dirExists) {
    obj = noon.load(PKGDIR + 'default.config.noon');
  } else {
    throw new Error('Package dir not found, set NODE_PATH per documentation.');
  }
  obj.dmuse.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.onelook.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.rbrain.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  obj.wordnik.date.stamp = (0, _stringify2.default)(new Date()).replace(/"/mig, '');
  var fileExists = null;
  try {
    fs.statSync(CFILE);
    fileExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileExists = false;
    }
  }
  if (fileExists) {
    if (argv.f) {
      var _config = noon.load(CFILE);
      obj.dmuse.date.stamp = _config.dmuse.date.stamp;
      obj.dmuse.date.remain = _config.dmuse.date.remain;
      obj.onelook.date.stamp = _config.onelook.date.stamp;
      obj.onelook.date.remain = _config.onelook.date.remain;
      obj.rbrain.date.stamp = _config.rbrain.date.stamp;
      obj.rbrain.date.remain = _config.rbrain.date.remain;
      obj.wordnik.date.stamp = _config.wordnik.date.stamp;
      obj.wordnik.date.remain = _config.wordnik.date.remain;
      noon.save(CFILE, obj);
      console.log('Overwrote ' + chalk.white.bold(CFILE) + '.');
    } else {
      console.log('Using configuration at ' + chalk.white.bold(CFILE) + '.');
    }
  } else if (!fileExists) {
    noon.save(CFILE, obj);
    console.log('Created ' + chalk.white.bold(CFILE) + '.');
  }
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (argv.v) {
    themes.labelDown('Configuration', theme, null);
    console.log('Your current configuration is:');
    console.log(noon.stringify(config, {
      indent: 2,
      align: true,
      maxalign: 32,
      sort: true,
      colors: true
    }));
    console.log('');
  }
};
//# sourceMappingURL=data:application/json;base64,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QU9BLFlBQVEsR0FBUixDQUFZLEVBQVo7QUFDRDtBQUNGLENBL0REIiwiZmlsZSI6ImNtZHMvY29uZmlnX2NtZHMvaW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uLy4uL3RoZW1lcycpXG5cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuY29uc3QgUEtHRElSID0gYCR7cHJvY2Vzcy5lbnYuTk9ERV9QQVRIfS9sZXhpbWF2ZW4vYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnaW5pdCdcbmV4cG9ydHMuZGVzYyA9ICdJbml0aWFsaXplIGNvbmZpZyBmaWxlJ1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBmb3JjZToge1xuICAgIGFsaWFzOiAnZicsXG4gICAgZGVzYzogJ0ZvcmNlIG92ZXJ3cml0aW5nIGNvbmZpZ3VyYXRpb24gZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgbGV0IGRpckV4aXN0cyA9IG51bGxcbiAgdHJ5IHtcbiAgICBmcy5zdGF0U3luYyhQS0dESVIpXG4gICAgZGlyRXhpc3RzID0gdHJ1ZVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIGRpckV4aXN0cyA9IGZhbHNlXG4gICAgfVxuICB9XG4gIGxldCBvYmogPSBudWxsXG4gIGlmIChkaXJFeGlzdHMpIHtcbiAgICBvYmogPSBub29uLmxvYWQoYCR7UEtHRElSfWRlZmF1bHQuY29uZmlnLm5vb25gKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFja2FnZSBkaXIgbm90IGZvdW5kLCBzZXQgTk9ERV9QQVRIIHBlciBkb2N1bWVudGF0aW9uLicpXG4gIH1cbiAgb2JqLmRtdXNlLmRhdGUuc3RhbXAgPSBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZSgpKS5yZXBsYWNlKC9cIi9taWcsICcnKVxuICBvYmoub25lbG9vay5kYXRlLnN0YW1wID0gSlNPTi5zdHJpbmdpZnkobmV3IERhdGUoKSkucmVwbGFjZSgvXCIvbWlnLCAnJylcbiAgb2JqLnJicmFpbi5kYXRlLnN0YW1wID0gSlNPTi5zdHJpbmdpZnkobmV3IERhdGUoKSkucmVwbGFjZSgvXCIvbWlnLCAnJylcbiAgb2JqLndvcmRuaWsuZGF0ZS5zdGFtcCA9IEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpLnJlcGxhY2UoL1wiL21pZywgJycpXG4gIGxldCBmaWxlRXhpc3RzID0gbnVsbFxuICB0cnkge1xuICAgIGZzLnN0YXRTeW5jKENGSUxFKVxuICAgIGZpbGVFeGlzdHMgPSB0cnVlXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgZmlsZUV4aXN0cyA9IGZhbHNlXG4gICAgfVxuICB9XG4gIGlmIChmaWxlRXhpc3RzKSB7XG4gICAgaWYgKGFyZ3YuZikge1xuICAgICAgY29uc3QgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICAgICAgb2JqLmRtdXNlLmRhdGUuc3RhbXAgPSBjb25maWcuZG11c2UuZGF0ZS5zdGFtcFxuICAgICAgb2JqLmRtdXNlLmRhdGUucmVtYWluID0gY29uZmlnLmRtdXNlLmRhdGUucmVtYWluXG4gICAgICBvYmoub25lbG9vay5kYXRlLnN0YW1wID0gY29uZmlnLm9uZWxvb2suZGF0ZS5zdGFtcFxuICAgICAgb2JqLm9uZWxvb2suZGF0ZS5yZW1haW4gPSBjb25maWcub25lbG9vay5kYXRlLnJlbWFpblxuICAgICAgb2JqLnJicmFpbi5kYXRlLnN0YW1wID0gY29uZmlnLnJicmFpbi5kYXRlLnN0YW1wXG4gICAgICBvYmoucmJyYWluLmRhdGUucmVtYWluID0gY29uZmlnLnJicmFpbi5kYXRlLnJlbWFpblxuICAgICAgb2JqLndvcmRuaWsuZGF0ZS5zdGFtcCA9IGNvbmZpZy53b3JkbmlrLmRhdGUuc3RhbXBcbiAgICAgIG9iai53b3JkbmlrLmRhdGUucmVtYWluID0gY29uZmlnLndvcmRuaWsuZGF0ZS5yZW1haW5cbiAgICAgIG5vb24uc2F2ZShDRklMRSwgb2JqKVxuICAgICAgY29uc29sZS5sb2coYE92ZXJ3cm90ZSAke2NoYWxrLndoaXRlLmJvbGQoQ0ZJTEUpfS5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhgVXNpbmcgY29uZmlndXJhdGlvbiBhdCAke2NoYWxrLndoaXRlLmJvbGQoQ0ZJTEUpfS5gKVxuICAgIH1cbiAgfSBlbHNlIGlmICghZmlsZUV4aXN0cykge1xuICAgIG5vb24uc2F2ZShDRklMRSwgb2JqKVxuICAgIGNvbnNvbGUubG9nKGBDcmVhdGVkICR7Y2hhbGsud2hpdGUuYm9sZChDRklMRSl9LmApXG4gIH1cbiAgY29uc3QgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICBjb25zdCB0aGVtZSA9IHRoZW1lcy5sb2FkVGhlbWUoY29uZmlnLnRoZW1lKVxuICBpZiAoYXJndi52KSB7XG4gICAgdGhlbWVzLmxhYmVsRG93bignQ29uZmlndXJhdGlvbicsIHRoZW1lLCBudWxsKVxuICAgIGNvbnNvbGUubG9nKCdZb3VyIGN1cnJlbnQgY29uZmlndXJhdGlvbiBpczonKVxuICAgIGNvbnNvbGUubG9nKG5vb24uc3RyaW5naWZ5KGNvbmZpZywge1xuICAgICAgaW5kZW50OiAyLFxuICAgICAgYWxpZ246IHRydWUsXG4gICAgICBtYXhhbGlnbjogMzIsXG4gICAgICBzb3J0OiB0cnVlLFxuICAgICAgY29sb3JzOiB0cnVlLFxuICAgIH0pKVxuICAgIGNvbnNvbGUubG9nKCcnKVxuICB9XG59XG4iXX0=