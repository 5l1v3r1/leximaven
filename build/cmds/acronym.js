'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'acronym <acronym>';
exports.desc = 'Acronyms';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Acronyms', theme, null);
  var acronym = argv.acronym.toUpperCase();
  var url = 'http://acronyms.silmaril.ie/cgi-bin/xaa?' + argv.acronym;
  var tofile = {
    type: 'acronym',
    source: 'http://acronyms.silmaril.ie',
    url: url
  };
  var ctstyle = _.get(chalk, theme.content.style);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var resp = response.body;
      if (resp.acronym.found.$.n === '0') {
        console.log(ctstyle('Found 0 acronyms for ' + acronym + '.'));
      } else {
        var found = resp.acronym.found;
        console.log(ctstyle('Found ' + found.$.n + ' acronyms for ' + acronym + ':'));
        var list = found.acro;
        for (var i = 0; i <= list.length - 1; i++) {
          var item = list[i];
          process.stdout.write(ctstyle('' + item.expan));
          tofile[['expansion' + i]] = item.expan;
          if (item.comment !== '') {
            if (item.comment.a) {
              var comment = item.comment.a;
              process.stdout.write(ctstyle(' - ' + comment._ + ' - ' + comment.$.href));
              tofile[['comment' + i]] = comment._;
              tofile[['url' + i]] = comment.$.href;
            } else {
              process.stdout.write(ctstyle(' - ' + item.comment));
              tofile[['comment' + i]] = item.comment;
            }
          }
          console.log(ctstyle(' - DDC: ' + item.$.dewey));
          tofile[['DDC' + i]] = item.$.dewey;
        }
        if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      }
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,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LENBQVAsQ0FBUCxJQUFzQixRQUFRLENBQVIsQ0FBVSxJQUFoQztBQUNELGFBTEQsTUFLTztBQUNMLHNCQUFRLE1BQVIsQ0FBZSxLQUFmLENBQXFCLGdCQUFjLEtBQUssT0FBbkIsQ0FBckI7QUFDQSxxQkFBTyxhQUFXLENBQVgsQ0FBUCxJQUEwQixLQUFLLE9BQS9CO0FBQ0Q7QUFDRjtBQUNELGtCQUFRLEdBQVIsQ0FBWSxxQkFBbUIsS0FBSyxDQUFMLENBQU8sS0FBMUIsQ0FBWjtBQUNBLGlCQUFPLFNBQU8sQ0FBUCxDQUFQLElBQXNCLEtBQUssQ0FBTCxDQUFPLEtBQTdCO0FBQ0Q7QUFDRCxZQUFJLEtBQUssQ0FBVCxFQUFZLE1BQU0sT0FBTixDQUFjLEtBQUssQ0FBbkIsRUFBc0IsS0FBSyxDQUEzQixFQUE4QixNQUE5QjtBQUNiO0FBQ0YsS0E1QkQsTUE0Qk87QUFDTCxjQUFRLEtBQVIsQ0FBaUIsTUFBTSxHQUFOLENBQVUsSUFBVixXQUF1QixTQUFTLFVBQWhDLE9BQWpCLFNBQW1FLE1BQU0sR0FBTixDQUFVLEtBQVYsQ0FBbkU7QUFDRDtBQUNGLEdBaENEO0FBaUNELENBOUNEIiwiZmlsZSI6ImNtZHMvYWNyb255bS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uL3RoZW1lcycpXG5jb25zdCB0b29scyA9IHJlcXVpcmUoJy4uL3Rvb2xzJylcblxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IG5lZWRsZSA9IHJlcXVpcmUoJ25lZWRsZScpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnYWNyb255bSA8YWNyb255bT4nXG5leHBvcnRzLmRlc2MgPSAnQWNyb255bXMnXG5leHBvcnRzLmJ1aWxkZXIgPSB7XG4gIG91dDoge1xuICAgIGFsaWFzOiAnbycsXG4gICAgZGVzYzogJ1dyaXRlIGNzb24sIGpzb24sIG5vb24sIHBsaXN0LCB5YW1sLCB4bWwnLFxuICAgIGRlZmF1bHQ6ICcnLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICB9LFxuICBmb3JjZToge1xuICAgIGFsaWFzOiAnZicsXG4gICAgZGVzYzogJ0ZvcmNlIG92ZXJ3cml0aW5nIG91dGZpbGUnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgfSxcbn1cbmV4cG9ydHMuaGFuZGxlciA9IChhcmd2KSA9PiB7XG4gIHRvb2xzLmNoZWNrQ29uZmlnKENGSUxFKVxuICBjb25zdCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gIGNvbnN0IHRoZW1lID0gdGhlbWVzLmxvYWRUaGVtZShjb25maWcudGhlbWUpXG4gIGlmIChjb25maWcudmVyYm9zZSkgdGhlbWVzLmxhYmVsRG93bignQWNyb255bXMnLCB0aGVtZSwgbnVsbClcbiAgY29uc3QgYWNyb255bSA9IGFyZ3YuYWNyb255bS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IHVybCA9IGBodHRwOi8vYWNyb255bXMuc2lsbWFyaWwuaWUvY2dpLWJpbi94YWE/JHthcmd2LmFjcm9ueW19YFxuICBjb25zdCB0b2ZpbGUgPSB7XG4gICAgdHlwZTogJ2Fjcm9ueW0nLFxuICAgIHNvdXJjZTogJ2h0dHA6Ly9hY3Jvbnltcy5zaWxtYXJpbC5pZScsXG4gICAgdXJsLFxuICB9XG4gIGNvbnN0IGN0c3R5bGUgPSBfLmdldChjaGFsaywgdGhlbWUuY29udGVudC5zdHlsZSlcbiAgbmVlZGxlLmdldCh1cmwsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgY29uc3QgcmVzcCA9IHJlc3BvbnNlLmJvZHlcbiAgICAgIGlmIChyZXNwLmFjcm9ueW0uZm91bmQuJC5uID09PSAnMCcpIHtcbiAgICAgICAgY29uc29sZS5sb2coY3RzdHlsZShgRm91bmQgMCBhY3JvbnltcyBmb3IgJHthY3JvbnltfS5gKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gcmVzcC5hY3JvbnltLmZvdW5kXG4gICAgICAgIGNvbnNvbGUubG9nKGN0c3R5bGUoYEZvdW5kICR7Zm91bmQuJC5ufSBhY3JvbnltcyBmb3IgJHthY3JvbnltfTpgKSlcbiAgICAgICAgY29uc3QgbGlzdCA9IGZvdW5kLmFjcm9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGlzdC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpXVxuICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCR7aXRlbS5leHBhbn1gKSlcbiAgICAgICAgICB0b2ZpbGVbW2BleHBhbnNpb24ke2l9YF1dID0gaXRlbS5leHBhblxuICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQgIT09ICcnKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50LmEpIHtcbiAgICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IGl0ZW0uY29tbWVudC5hXG4gICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCAtICR7Y29tbWVudC5ffSAtICR7Y29tbWVudC4kLmhyZWZ9YCkpXG4gICAgICAgICAgICAgIHRvZmlsZVtbYGNvbW1lbnQke2l9YF1dID0gY29tbWVudC5fXG4gICAgICAgICAgICAgIHRvZmlsZVtbYHVybCR7aX1gXV0gPSBjb21tZW50LiQuaHJlZlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY3RzdHlsZShgIC0gJHtpdGVtLmNvbW1lbnR9YCkpXG4gICAgICAgICAgICAgIHRvZmlsZVtbYGNvbW1lbnQke2l9YF1dID0gaXRlbS5jb21tZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKGN0c3R5bGUoYCAtIEREQzogJHtpdGVtLiQuZGV3ZXl9YCkpXG4gICAgICAgICAgdG9maWxlW1tgRERDJHtpfWBdXSA9IGl0ZW0uJC5kZXdleVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd2Lm8pIHRvb2xzLm91dEZpbGUoYXJndi5vLCBhcmd2LmYsIHRvZmlsZSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihgJHtjaGFsay5yZWQuYm9sZChgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9OmApfSAke2NoYWxrLnJlZChlcnJvcil9YClcbiAgICB9XG4gIH0pXG59XG4iXX0=