'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var http = require('good-guy-http')();
var noon = require('noon');
var xml2js = require('xml2js');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'acronym <acronym>';
exports.desc = 'Acronyms';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.label(theme, 'down', 'Acronyms');
  var acronym = argv.acronym.toUpperCase();
  var url = 'http://acronyms.silmaril.ie/cgi-bin/xaa?' + argv.acronym;
  var tofile = {
    type: 'acronym',
    source: 'http://acronyms.silmaril.ie',
    url: url
  };
  var ctstyle = _.get(chalk, theme.content.style);
  http({ url: url }, function (error, response) {
    if (!error && response.statusCode === 200) {
      var body = response.body;
      var parser = new xml2js.Parser();
      parser.parseString(body, function (err, result) {
        var found = result.acronym.found[0];
        var count = found.$;
        if (count.n === '0') {
          console.log(ctstyle('Found 0 acronyms for ' + acronym + '.'));
        } else {
          console.log(ctstyle('Found ' + count.n + ' acronyms for ' + acronym + ':'));
          var list = found.acro;
          for (var i = 0; i <= list.length - 1; i++) {
            var item = list[i];
            process.stdout.write(ctstyle('' + item.expan));
            tofile[['expansion' + i]] = item.expan[0];
            var comm = item.comment[0];
            if (comm !== '') {
              if (comm.a) {
                var comment = comm.a[0];
                process.stdout.write(ctstyle(' - ' + comment._ + ' - ' + comment.$.href));
                tofile[['comment' + i]] = comment._;
                tofile[['url' + i]] = comment.$.href;
              } else {
                process.stdout.write(ctstyle(' - ' + comm));
                tofile[['comment' + i]] = item.comment[0];
              }
            }
            console.log(ctstyle(' - DDC: ' + item.$.dewey));
            tofile[['DDC' + i]] = item.$.dewey;
          }
          if (argv.o) tools.outFile(argv.o, argv.f, tofile);
        }
      });
    } else {
      throw new Error('HTTP ' + response.statusCode + ': ' + error);
    }
  });
};
//# sourceMappingURL=data:application/json;base64,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Q0FBTyxDQUFQLENBQWhCO0FBQ0Esd0JBQVEsTUFBUixDQUFlLEtBQWYsQ0FBcUIsZ0JBQWMsUUFBUSxDQUF0QixXQUE2QixRQUFRLENBQVIsQ0FBVSxJQUF2QyxDQUFyQjtBQUNBLHVCQUFPLGFBQVcsQ0FBWCxDQUFQLElBQTBCLFFBQVEsQ0FBbEM7QUFDQSx1QkFBTyxTQUFPLENBQVAsQ0FBUCxJQUFzQixRQUFRLENBQVIsQ0FBVSxJQUFoQztBQUNELGVBTEQsTUFLTztBQUNMLHdCQUFRLE1BQVIsQ0FBZSxLQUFmLENBQXFCLGdCQUFjLElBQWQsQ0FBckI7QUFDQSx1QkFBTyxhQUFXLENBQVgsQ0FBUCxJQUEwQixLQUFLLE9BQUwsQ0FBYSxDQUFiLENBQTFCO0FBQ0Q7QUFDRjtBQUNELG9CQUFRLEdBQVIsQ0FBWSxxQkFBbUIsS0FBSyxDQUFMLENBQU8sS0FBMUIsQ0FBWjtBQUNBLG1CQUFPLFNBQU8sQ0FBUCxDQUFQLElBQXNCLEtBQUssQ0FBTCxDQUFPLEtBQTdCO0FBQ0Q7QUFDRCxjQUFJLEtBQUssQ0FBVCxFQUFZLE1BQU0sT0FBTixDQUFjLEtBQUssQ0FBbkIsRUFBc0IsS0FBSyxDQUEzQixFQUE4QixNQUE5QjtBQUNiO0FBQ0YsT0E3QkQ7QUE4QkQsS0FqQ0QsTUFpQ087QUFDTCxZQUFNLElBQUksS0FBSixXQUFrQixTQUFTLFVBQTNCLFVBQTBDLEtBQTFDLENBQU47QUFDRDtBQUNGLEdBckNEO0FBc0NELENBbkREIiwiZmlsZSI6ImNtZHMvYWNyb255bS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uL3RoZW1lcycpXG5jb25zdCB0b29scyA9IHJlcXVpcmUoJy4uL3Rvb2xzJylcblxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdnb29kLWd1eS1odHRwJykoKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuY29uc3QgeG1sMmpzID0gcmVxdWlyZSgneG1sMmpzJylcblxuY29uc3QgQ0ZJTEUgPSBgJHtwcm9jZXNzLmVudi5IT01FfS8ubGV4aW1hdmVuLm5vb25gXG5cbmV4cG9ydHMuY29tbWFuZCA9ICdhY3JvbnltIDxhY3JvbnltPidcbmV4cG9ydHMuZGVzYyA9ICdBY3JvbnltcydcbmV4cG9ydHMuYnVpbGRlciA9IHtcbiAgb3V0OiB7XG4gICAgYWxpYXM6ICdvJyxcbiAgICBkZXNjOiAnV3JpdGUgY3NvbiwganNvbiwgbm9vbiwgcGxpc3QsIHlhbWwsIHhtbCcsXG4gICAgZGVmYXVsdDogJycsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gIH0sXG4gIGZvcmNlOiB7XG4gICAgYWxpYXM6ICdmJyxcbiAgICBkZXNjOiAnRm9yY2Ugb3ZlcndyaXRpbmcgb3V0ZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgdG9vbHMuY2hlY2tDb25maWcoQ0ZJTEUpXG4gIGNvbnN0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGNvbmZpZy52ZXJib3NlKSB0aGVtZXMubGFiZWwodGhlbWUsICdkb3duJywgJ0Fjcm9ueW1zJylcbiAgY29uc3QgYWNyb255bSA9IGFyZ3YuYWNyb255bS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IHVybCA9IGBodHRwOi8vYWNyb255bXMuc2lsbWFyaWwuaWUvY2dpLWJpbi94YWE/JHthcmd2LmFjcm9ueW19YFxuICBjb25zdCB0b2ZpbGUgPSB7XG4gICAgdHlwZTogJ2Fjcm9ueW0nLFxuICAgIHNvdXJjZTogJ2h0dHA6Ly9hY3Jvbnltcy5zaWxtYXJpbC5pZScsXG4gICAgdXJsLFxuICB9XG4gIGNvbnN0IGN0c3R5bGUgPSBfLmdldChjaGFsaywgdGhlbWUuY29udGVudC5zdHlsZSlcbiAgaHR0cCh7IHVybCB9LCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKCFlcnJvciAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGJvZHkgPSByZXNwb25zZS5ib2R5XG4gICAgICBjb25zdCBwYXJzZXIgPSBuZXcgeG1sMmpzLlBhcnNlcigpXG4gICAgICBwYXJzZXIucGFyc2VTdHJpbmcoYm9keSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gcmVzdWx0LmFjcm9ueW0uZm91bmRbMF1cbiAgICAgICAgY29uc3QgY291bnQgPSBmb3VuZC4kXG4gICAgICAgIGlmIChjb3VudC5uID09PSAnMCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhjdHN0eWxlKGBGb3VuZCAwIGFjcm9ueW1zIGZvciAke2Fjcm9ueW19LmApKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGN0c3R5bGUoYEZvdW5kICR7Y291bnQubn0gYWNyb255bXMgZm9yICR7YWNyb255bX06YCkpXG4gICAgICAgICAgY29uc3QgbGlzdCA9IGZvdW5kLmFjcm9cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsaXN0Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGxpc3RbaV1cbiAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCR7aXRlbS5leHBhbn1gKSlcbiAgICAgICAgICAgIHRvZmlsZVtbYGV4cGFuc2lvbiR7aX1gXV0gPSBpdGVtLmV4cGFuWzBdXG4gICAgICAgICAgICBjb25zdCBjb21tID0gaXRlbS5jb21tZW50WzBdXG4gICAgICAgICAgICBpZiAoY29tbSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbW0uYSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSBjb21tLmFbMF1cbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShjdHN0eWxlKGAgLSAke2NvbW1lbnQuX30gLSAke2NvbW1lbnQuJC5ocmVmfWApKVxuICAgICAgICAgICAgICAgIHRvZmlsZVtbYGNvbW1lbnQke2l9YF1dID0gY29tbWVudC5fXG4gICAgICAgICAgICAgICAgdG9maWxlW1tgdXJsJHtpfWBdXSA9IGNvbW1lbnQuJC5ocmVmXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY3RzdHlsZShgIC0gJHtjb21tfWApKVxuICAgICAgICAgICAgICAgIHRvZmlsZVtbYGNvbW1lbnQke2l9YF1dID0gaXRlbS5jb21tZW50WzBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN0c3R5bGUoYCAtIEREQzogJHtpdGVtLiQuZGV3ZXl9YCkpXG4gICAgICAgICAgICB0b2ZpbGVbW2BEREMke2l9YF1dID0gaXRlbS4kLmRld2V5XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcmd2Lm8pIHRvb2xzLm91dEZpbGUoYXJndi5vLCBhcmd2LmYsIHRvZmlsZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX06ICR7ZXJyb3J9YClcbiAgICB9XG4gIH0pXG59XG4iXX0=