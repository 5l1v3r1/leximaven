'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'onelook <word>';
exports.desc = 'Onelook definitions';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  links: {
    alias: 'l',
    desc: 'Include resource links',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    onelook: {
      links: argv.l
    }
  };
  if (config.prefer) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Onelook', theme, null);
  var url = 'http://onelook.com/?xml=1&w=' + argv.word;
  url = encodeURI(url);
  var tofile = { type: 'onelook', source: 'http://www.onelook.com' };
  var ctstyle = _.get(chalk, theme.content.style);
  needle.get(url, function (error, response) {
    if (!error && response.statusCode === 200) {
      var obj = response.body;
      var resp = obj.OLResponse;
      var phrase = resp.OLPhrases;
      var similar = resp.OLSimilar;
      var quickdef = resp.OLQuickDef;
      var resources = resp.OLRes;
      themes.labelDown('Definition', theme, null);
      if (Array.isArray(quickdef)) {
        for (var i = 0; i <= quickdef.length - 1; i++) {
          var item = quickdef[i];
          item = item.replace(/&lt;|&gt;|\n|\/i/g, '');
          item = item.replace(/i"/g, '"');
          console.log(ctstyle(item));
          tofile[['definition' + i]] = item;
        }
      } else {
        var definition = quickdef.replace(/&lt;|&gt;|\n|\/i/g, '');
        console.log(ctstyle(definition));
        tofile.definition = definition;
      }
      if (phrase) {
        var phrases = phrase.replace(/\n/g, '');
        themes.labelDown('Phrases', theme, phrases);
        tofile.phrase = phrases;
      }
      if (similar) {
        var sim = similar.replace(/\n/g, '');
        themes.labelDown('Similar', theme, sim);
        tofile.sim = sim;
      }
      if (config.onelook.links) {
        themes.labelDown('Resources', theme, null);
        for (var _i = 0; _i <= resources.length - 1; _i++) {
          var _item = resources[_i];
          var res = _item.OLResName.replace(/\n/g, '');
          var link = _item.OLResLink.replace(/\n/g, '');
          themes.labelRight(res, theme, link);
          tofile[['res' + _i]] = res;
          tofile[['link' + _i]] = link;
        }
      }
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.prefer) noon.save(CFILE, config);
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,