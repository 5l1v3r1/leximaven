'use strict';

/* eslint max-len:0 */
var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var moment = require('moment');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'onelook <word>';
exports.desc = 'Onelook definitions';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  links: {
    alias: 'l',
    desc: 'Include resource links',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var proceed = false;
  var stamp = new Date(config.onelook.date.stamp);
  var hours = moment(new Date()).diff(stamp, 'hours');
  var minutes = moment(new Date()).diff(stamp, 'minutes');
  var reset = false;
  if (hours < 24 || hours < 0) {
    config.onelook.date.remain = config.onelook.date.remain - 1;
    noon.save(CFILE, config);
  } else if (hours >= 24) {
    reset = true;
    config.onelook.date.stamp = moment().format();
    config.onelook.date.remain = config.onelook.date.limit;
    console.log(chalk.white('Reset API limit to ' + config.onelook.date.limit + '/' + config.onelook.date.interval + '.'));
    config.onelook.date.remain = config.onelook.date.remain - 1;
    noon.save(CFILE, config);
  }
  if (config.onelook.date.remain === 0) {
    proceed = false;
  } else if (config.onelook.date.remain < 0) {
    proceed = false;
    config.onelook.date.remain = 0;
    noon.save(CFILE, config);
  } else {
    proceed = true;
  }
  if (proceed) {
    (function () {
      var userConfig = {
        onelook: {
          links: argv.l
        }
      };
      if (config.merge) config = _.merge({}, config, userConfig);
      var theme = themes.loadTheme(config.theme);
      if (config.verbose) themes.labelDown('Onelook', theme, null);
      var url = 'http://onelook.com/?xml=1&w=' + argv.word;
      url = encodeURI(url);
      var tofile = {
        type: 'onelook',
        source: 'http://www.onelook.com',
        url: url
      };
      var ctstyle = _.get(chalk, theme.content.style);
      needle.get(url, function (error, response) {
        if (!error && response.statusCode === 200) {
          var obj = response.body;
          var resp = obj.OLResponse;
          var phrase = resp.OLPhrases;
          var similar = resp.OLSimilar;
          var quickdef = resp.OLQuickDef;
          var resources = resp.OLRes;
          themes.labelDown('Definition', theme, null);
          if (Array.isArray(quickdef)) {
            for (var i = 0; i <= quickdef.length - 1; i++) {
              var item = quickdef[i];
              item = item.replace(/&lt;|&gt;|\n|\/i/g, '');
              item = item.replace(/i"/g, '"');
              console.log(ctstyle(item));
              tofile[['definition' + i]] = item;
            }
          } else {
            var definition = quickdef.replace(/&lt;|&gt;|\n|\/i/g, '');
            console.log(ctstyle(definition));
            tofile.definition = definition;
          }
          if (phrase) {
            var phrases = phrase.replace(/\n/g, '');
            themes.labelDown('Phrases', theme, phrases);
            tofile.phrase = phrases;
          }
          if (similar) {
            var sim = similar.replace(/\n/g, '');
            themes.labelDown('Similar', theme, sim);
            tofile.sim = sim;
          }
          if (config.onelook.links) {
            themes.labelDown('Resources', theme, null);
            for (var _i = 0; _i <= resources.length - 1; _i++) {
              var _item = resources[_i];
              var res = _item.OLResName.replace(/\n/g, '');
              var link = _item.OLResLink.replace(/\n/g, '');
              themes.labelRight(res, theme, link);
              tofile[['res' + _i]] = res;
              tofile[['link' + _i]] = link;
            }
          }
          if (argv.o) tools.outFile(argv.o, argv.f, tofile);
          if (argv.s && config.merge) noon.save(CFILE, config);
          if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
          if (reset) {
            console.log(config.onelook.date.remain + '/' + config.onelook.date.limit + ' requests remaining today.');
          } else {
            console.log(config.onelook.date.remain + '/' + config.onelook.date.limit + ' requests remaining today, will reset in ' + (23 - hours) + ' hours, ' + (59 - minutes) + ' minutes.');
          }
        } else {
          console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
        }
      });
    })();
  } else {
    console.error(chalk.red('Reached today\'s usage limit of ' + config.onelook.date.limit + '.'));
    process.exit(1);
  }
};
//# sourceMappingURL=data:application/json;base64,