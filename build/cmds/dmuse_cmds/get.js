'use strict';

/* eslint max-len:0 */
var themes = require('../../themes');
var tools = require('../../tools');

var _ = require('lodash');
var chalk = require('chalk');
var moment = require('moment');
var needle = require('needle');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'get <condition>';
exports.desc = 'Datamuse query';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  max: {
    alias: 'm',
    desc: 'Maximum number of results, 1 to 1000',
    default: 5,
    type: 'number'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var proceed = false;
  var stamp = new Date(config.dmuse.date.stamp);
  var now = moment(new Date()).diff(stamp, 'hours');
  var diff = 24 - now;
  var reset = false;
  if (diff < 24) {
    config.dmuse.date.remain = config.dmuse.date.remain - 1;
    noon.save(CFILE, config);
  } else if (diff >= 24) {
    reset = true;
    config.dmuse.date.stamp = moment().format();
    config.dmuse.date.remain = config.dmuse.date.limit;
    console.log(chalk.white('Reset API limit to ' + config.dmuse.date.limit + '/' + config.dmuse.date.interval + '.'));
    config.dmuse.date.remain = config.dmuse.date.remain - 1;
    noon.save(CFILE, config);
  }
  if (config.dmuse.date.remain === 0) {
    proceed = false;
  } else if (config.dmuse.date.remain < 0) {
    proceed = false;
    config.dmuse.date.remain = 0;
    noon.save(CFILE, config);
  } else {
    proceed = true;
  }
  if (proceed) {
    (function () {
      var userConfig = {
        dmuse: {
          max: argv.m
        }
      };
      if (config.merge) config = _.merge({}, config, userConfig);
      var theme = themes.loadTheme(config.theme);
      if (config.verbose) themes.labelDown('Datamuse', theme, null);
      var ccont = [];
      ccont.push(argv.condition);
      if (argv._.length > 1) {
        for (var i = 1; i <= argv._.length - 1; i++) {
          ccont.push(argv._[i]);
        }
      }
      var prefix = 'http://api.datamuse.com/words?';
      var conditions = 'max=' + config.dmuse.max + '&';
      _.each(ccont, function (value) {
        conditions = conditions + '&' + value;
      });
      var url = '' + prefix + conditions;
      url = encodeURI(url);
      var tags = {
        n: 'noun',
        adj: 'adjective',
        adv: 'adverb',
        syn: 'synonym'
      };
      var tofile = {
        type: 'datamuse',
        source: 'http://datamuse.com/api',
        url: url
      };
      var ctstyle = _.get(chalk, theme.content.style);
      needle.get(url, function (error, response) {
        if (!error && response.statusCode === 200) {
          var resp = response.body;
          for (var _i = 0; _i <= resp.length - 1; _i++) {
            var item = resp[_i];
            themes.labelRight('Match', theme, item.word + ' ');
            tofile[['match' + _i]] = item.word;
            if (item.tags !== undefined && item.tags !== []) {
              themes.labelRight('Tags', theme, null);
              for (var j = 0; j <= item.tags.length - 1; j++) {
                if (j === item.tags.length - 1) {
                  process.stdout.write(ctstyle('' + tags[item.tags[j]]));
                  tofile[['tags' + j]] = tags[item.tags[j]];
                } else {
                  process.stdout.write(ctstyle(tags[item.tags[j]] + ', '));
                }
              }
              console.log('');
            }
          }
          if (argv.o) tools.outFile(argv.o, argv.f, tofile);
          if (argv.s && config.merge) noon.save(CFILE, config);
          if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
          if (reset) {
            console.log(config.dmuse.date.remain + '/' + config.dmuse.date.limit + ' requests remaining today.');
          } else {
            console.log(config.dmuse.date.remain + '/' + config.dmuse.date.limit + ' requests remaining today, will reset in ' + diff + ' hours.');
          }
        } else {
          console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
        }
      });
    })();
  } else {
    console.error(chalk.red('Reached today\'s usage limit of ' + config.dmuse.date.limit + '.'));
    process.exit(1);
  }
};
//# sourceMappingURL=data:application/json;base64,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ZHMvZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG1heC1sZW46MCAqL1xuY29uc3QgdGhlbWVzID0gcmVxdWlyZSgnLi4vLi4vdGhlbWVzJylcbmNvbnN0IHRvb2xzID0gcmVxdWlyZSgnLi4vLi4vdG9vbHMnKVxuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50JylcbmNvbnN0IG5lZWRsZSA9IHJlcXVpcmUoJ25lZWRsZScpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnZ2V0IDxjb25kaXRpb24+J1xuZXhwb3J0cy5kZXNjID0gJ0RhdGFtdXNlIHF1ZXJ5J1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBvdXQ6IHtcbiAgICBhbGlhczogJ28nLFxuICAgIGRlc2M6ICdXcml0ZSBjc29uLCBqc29uLCBub29uLCBwbGlzdCwgeWFtbCwgeG1sJyxcbiAgICBkZWZhdWx0OiAnJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgfSxcbiAgZm9yY2U6IHtcbiAgICBhbGlhczogJ2YnLFxuICAgIGRlc2M6ICdGb3JjZSBvdmVyd3JpdGluZyBvdXRmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIHNhdmU6IHtcbiAgICBhbGlhczogJ3MnLFxuICAgIGRlc2M6ICdTYXZlIGZsYWdzIHRvIGNvbmZpZyBmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG4gIG1heDoge1xuICAgIGFsaWFzOiAnbScsXG4gICAgZGVzYzogJ01heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMsIDEgdG8gMTAwMCcsXG4gICAgZGVmYXVsdDogNSxcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgfSxcbn1cbmV4cG9ydHMuaGFuZGxlciA9IChhcmd2KSA9PiB7XG4gIHRvb2xzLmNoZWNrQ29uZmlnKENGSUxFKVxuICBsZXQgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICBsZXQgcHJvY2VlZCA9IGZhbHNlXG4gIGNvbnN0IHN0YW1wID0gbmV3IERhdGUoY29uZmlnLmRtdXNlLmRhdGUuc3RhbXApXG4gIGNvbnN0IG5vdyA9IG1vbWVudChuZXcgRGF0ZSkuZGlmZihzdGFtcCwgJ2hvdXJzJylcbiAgY29uc3QgZGlmZiA9IDI0IC0gbm93XG4gIGxldCByZXNldCA9IGZhbHNlXG4gIGlmIChkaWZmIDwgMjQpIHtcbiAgICBjb25maWcuZG11c2UuZGF0ZS5yZW1haW4gPSBjb25maWcuZG11c2UuZGF0ZS5yZW1haW4gLSAxXG4gICAgbm9vbi5zYXZlKENGSUxFLCBjb25maWcpXG4gIH0gZWxzZSBpZiAoZGlmZiA+PSAyNCkge1xuICAgIHJlc2V0ID0gdHJ1ZVxuICAgIGNvbmZpZy5kbXVzZS5kYXRlLnN0YW1wID0gbW9tZW50KCkuZm9ybWF0KClcbiAgICBjb25maWcuZG11c2UuZGF0ZS5yZW1haW4gPSBjb25maWcuZG11c2UuZGF0ZS5saW1pdFxuICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKGBSZXNldCBBUEkgbGltaXQgdG8gJHtjb25maWcuZG11c2UuZGF0ZS5saW1pdH0vJHtjb25maWcuZG11c2UuZGF0ZS5pbnRlcnZhbH0uYCkpXG4gICAgY29uZmlnLmRtdXNlLmRhdGUucmVtYWluID0gY29uZmlnLmRtdXNlLmRhdGUucmVtYWluIC0gMVxuICAgIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICB9XG4gIGlmIChjb25maWcuZG11c2UuZGF0ZS5yZW1haW4gPT09IDApIHtcbiAgICBwcm9jZWVkID0gZmFsc2VcbiAgfSBlbHNlIGlmIChjb25maWcuZG11c2UuZGF0ZS5yZW1haW4gPCAwKSB7XG4gICAgcHJvY2VlZCA9IGZhbHNlXG4gICAgY29uZmlnLmRtdXNlLmRhdGUucmVtYWluID0gMFxuICAgIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICB9IGVsc2Uge1xuICAgIHByb2NlZWQgPSB0cnVlXG4gIH1cbiAgaWYgKHByb2NlZWQpIHtcbiAgICBjb25zdCB1c2VyQ29uZmlnID0ge1xuICAgICAgZG11c2U6IHtcbiAgICAgICAgbWF4OiBhcmd2Lm0sXG4gICAgICB9LFxuICAgIH1cbiAgICBpZiAoY29uZmlnLm1lcmdlKSBjb25maWcgPSBfLm1lcmdlKHt9LCBjb25maWcsIHVzZXJDb25maWcpXG4gICAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgICBpZiAoY29uZmlnLnZlcmJvc2UpIHRoZW1lcy5sYWJlbERvd24oJ0RhdGFtdXNlJywgdGhlbWUsIG51bGwpXG4gICAgY29uc3QgY2NvbnQgPSBbXVxuICAgIGNjb250LnB1c2goYXJndi5jb25kaXRpb24pXG4gICAgaWYgKGFyZ3YuXy5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhcmd2Ll8ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNjb250LnB1c2goYXJndi5fW2ldKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwcmVmaXggPSAnaHR0cDovL2FwaS5kYXRhbXVzZS5jb20vd29yZHM/J1xuICAgIGxldCBjb25kaXRpb25zID0gYG1heD0ke2NvbmZpZy5kbXVzZS5tYXh9JmBcbiAgICBfLmVhY2goY2NvbnQsICh2YWx1ZSkgPT4ge1xuICAgICAgY29uZGl0aW9ucyA9IGAke2NvbmRpdGlvbnN9JiR7dmFsdWV9YFxuICAgIH0pXG4gICAgbGV0IHVybCA9IGAke3ByZWZpeH0ke2NvbmRpdGlvbnN9YFxuICAgIHVybCA9IGVuY29kZVVSSSh1cmwpXG4gICAgY29uc3QgdGFncyA9IHtcbiAgICAgIG46ICdub3VuJyxcbiAgICAgIGFkajogJ2FkamVjdGl2ZScsXG4gICAgICBhZHY6ICdhZHZlcmInLFxuICAgICAgc3luOiAnc3lub255bScsXG4gICAgfVxuICAgIGNvbnN0IHRvZmlsZSA9IHtcbiAgICAgIHR5cGU6ICdkYXRhbXVzZScsXG4gICAgICBzb3VyY2U6ICdodHRwOi8vZGF0YW11c2UuY29tL2FwaScsXG4gICAgICB1cmwsXG4gICAgfVxuICAgIGNvbnN0IGN0c3R5bGUgPSBfLmdldChjaGFsaywgdGhlbWUuY29udGVudC5zdHlsZSlcbiAgICBuZWVkbGUuZ2V0KHVybCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKCFlcnJvciAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgY29uc3QgcmVzcCA9IHJlc3BvbnNlLmJvZHlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcmVzcC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gcmVzcFtpXVxuICAgICAgICAgIHRoZW1lcy5sYWJlbFJpZ2h0KCdNYXRjaCcsIHRoZW1lLCBgJHtpdGVtLndvcmR9IGApXG4gICAgICAgICAgdG9maWxlW1tgbWF0Y2gke2l9YF1dID0gaXRlbS53b3JkXG4gICAgICAgICAgaWYgKGl0ZW0udGFncyAhPT0gdW5kZWZpbmVkICYmIGl0ZW0udGFncyAhPT0gW10pIHtcbiAgICAgICAgICAgIHRoZW1lcy5sYWJlbFJpZ2h0KCdUYWdzJywgdGhlbWUsIG51bGwpXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBpdGVtLnRhZ3MubGVuZ3RoIC0gMTsgaisrKSB7XG4gICAgICAgICAgICAgIGlmIChqID09PSBpdGVtLnRhZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGN0c3R5bGUoYCR7dGFnc1tpdGVtLnRhZ3Nbal1dfWApKVxuICAgICAgICAgICAgICAgIHRvZmlsZVtbYHRhZ3Mke2p9YF1dID0gdGFnc1tpdGVtLnRhZ3Nbal1dXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY3RzdHlsZShgJHt0YWdzW2l0ZW0udGFnc1tqXV19LCBgKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coJycpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd2Lm8pIHRvb2xzLm91dEZpbGUoYXJndi5vLCBhcmd2LmYsIHRvZmlsZSlcbiAgICAgICAgaWYgKGFyZ3YucyAmJiBjb25maWcubWVyZ2UpIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICAgICAgICBpZiAoYXJndi5zICYmICFjb25maWcubWVyZ2UpIGNvbnNvbGUuZXJyKGNoYWxrLnJlZCgnU2V0IG9wdGlvbiBtZXJnZSB0byB0cnVlIScpKVxuICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtjb25maWcuZG11c2UuZGF0ZS5yZW1haW59LyR7Y29uZmlnLmRtdXNlLmRhdGUubGltaXR9IHJlcXVlc3RzIHJlbWFpbmluZyB0b2RheS5gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2NvbmZpZy5kbXVzZS5kYXRlLnJlbWFpbn0vJHtjb25maWcuZG11c2UuZGF0ZS5saW1pdH0gcmVxdWVzdHMgcmVtYWluaW5nIHRvZGF5LCB3aWxsIHJlc2V0IGluICR7ZGlmZn0gaG91cnMuYClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHtjaGFsay5yZWQuYm9sZChgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9OmApfSAke2NoYWxrLnJlZChlcnJvcil9YClcbiAgICAgIH1cbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKGBSZWFjaGVkIHRvZGF5J3MgdXNhZ2UgbGltaXQgb2YgJHtjb25maWcuZG11c2UuZGF0ZS5saW1pdH0uYCkpXG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cbn1cbiJdfQ==