'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var child = require('child_process');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'map <word>';
exports.desc = 'Maps of word info';
exports.builder = {
  limit: {
    alias: 'l',
    desc: 'Limits the number of results',
    default: 1,
    type: 'number'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    wordmap: {
      limit: argv.l
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Wordmap', theme, null);
  var word = argv.word;
  var l = argv.l;
  var bin = process.cwd() + '/build/leximaven.js';
  child.spawnSync('node', [bin, 'rbrain', 'combine', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'info', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'rhyme', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'define', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'example', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'hyphen', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'origin', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'phrase', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'pronounce', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'relate', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'acronym', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'dmuse', '-m' + l, 'ml=' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'onelook', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'urban', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'anagram', '-t' + l, '' + word], { stdio: 'inherit' });
  if (argv.s && config.merge) noon.save(CFILE, config);
  if (argv.s && !config.merge) throw new Error("Can't save user config, set option merge to true.");
};
//# sourceMappingURL=data:application/json;base64,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LElBQUwsQ0FBVSxLQUFWLEVBQWlCLE1BQWpCO0FBQzVCLE1BQUksS0FBSyxDQUFMLElBQVUsQ0FBQyxPQUFPLEtBQXRCLEVBQTZCLE1BQU0sSUFBSSxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUM5QixDQS9CRCIsImZpbGUiOiJjbWRzL3dvcmRtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aGVtZXMgPSByZXF1aXJlKCcuLi90aGVtZXMnKVxuY29uc3QgdG9vbHMgPSByZXF1aXJlKCcuLi90b29scycpXG5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuY29uc3QgY2hpbGQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmNvbnN0IG5vb24gPSByZXF1aXJlKCdub29uJylcblxuY29uc3QgQ0ZJTEUgPSBgJHtwcm9jZXNzLmVudi5IT01FfS8ubGV4aW1hdmVuLm5vb25gXG5cbmV4cG9ydHMuY29tbWFuZCA9ICdtYXAgPHdvcmQ+J1xuZXhwb3J0cy5kZXNjID0gJ01hcHMgb2Ygd29yZCBpbmZvJ1xuZXhwb3J0cy5idWlsZGVyID0ge1xuICBsaW1pdDoge1xuICAgIGFsaWFzOiAnbCcsXG4gICAgZGVzYzogJ0xpbWl0cyB0aGUgbnVtYmVyIG9mIHJlc3VsdHMnLFxuICAgIGRlZmF1bHQ6IDEsXG4gICAgdHlwZTogJ251bWJlcicsXG4gIH0sXG4gIHNhdmU6IHtcbiAgICBhbGlhczogJ3MnLFxuICAgIGRlc2M6ICdTYXZlIGZsYWdzIHRvIGNvbmZpZyBmaWxlJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gIH0sXG59XG5leHBvcnRzLmhhbmRsZXIgPSAoYXJndikgPT4ge1xuICB0b29scy5jaGVja0NvbmZpZyhDRklMRSlcbiAgbGV0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgY29uc3QgdXNlckNvbmZpZyA9IHtcbiAgICB3b3JkbWFwOiB7XG4gICAgICBsaW1pdDogYXJndi5sLFxuICAgIH0sXG4gIH1cbiAgaWYgKGNvbmZpZy5tZXJnZSkgY29uZmlnID0gXy5tZXJnZSh7fSwgY29uZmlnLCB1c2VyQ29uZmlnKVxuICBjb25zdCB0aGVtZSA9IHRoZW1lcy5sb2FkVGhlbWUoY29uZmlnLnRoZW1lKVxuICBpZiAoY29uZmlnLnZlcmJvc2UpIHRoZW1lcy5sYWJlbERvd24oJ1dvcmRtYXAnLCB0aGVtZSwgbnVsbClcbiAgY29uc3Qgd29yZCA9IGFyZ3Yud29yZFxuICBjb25zdCBsID0gYXJndi5sXG4gIGNvbnN0IGJpbiA9IGAke3Byb2Nlc3MuY3dkKCl9L2J1aWxkL2xleGltYXZlbi5qc2BcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3JicmFpbicsICdjb21iaW5lJywgYC1tJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAncmJyYWluJywgJ2luZm8nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3JicmFpbicsICdyaHltZScsIGAtbSR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAnZGVmaW5lJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdleGFtcGxlJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdoeXBoZW4nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAnb3JpZ2luJywgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ3BocmFzZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAncHJvbm91bmNlJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdyZWxhdGUnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdhY3JvbnltJywgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdkbXVzZScsIGAtbSR7bH1gLCBgbWw9JHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ29uZWxvb2snLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3VyYmFuJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnYW5hZ3JhbScsIGAtdCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgaWYgKGFyZ3YucyAmJiBjb25maWcubWVyZ2UpIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICBpZiAoYXJndi5zICYmICFjb25maWcubWVyZ2UpIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNhdmUgdXNlciBjb25maWcsIHNldCBvcHRpb24gbWVyZ2UgdG8gdHJ1ZS5cIilcbn1cbiJdfQ==