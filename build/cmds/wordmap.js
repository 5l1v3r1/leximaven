'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var child = require('child_process');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'map <word>';
exports.desc = 'Maps of word info';
exports.builder = {
  limit: {
    alias: 'l',
    desc: 'Limits the number of results',
    default: 1,
    type: 'number'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    wordmap: {
      limit: argv.l
    }
  };
  if (config.prefer) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Wordmap', theme, null);
  var word = argv.word;
  var l = argv.l;
  var bin = process.cwd() + '/bin/leximaven.js';
  child.spawnSync('node', [bin, 'rbrain', 'combine', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'info', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'rhyme', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'define', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'example', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'hyphen', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'origin', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'phrase', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'pronounce', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'relate', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'acronym', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'dmuse', '-m' + l, 'ml=' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'onelook', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'urban', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'anagram', '-t' + l, '' + word], { stdio: 'inherit' });
  if (argv.s && config.prefer) noon.save(CFILE, config);
};
//# sourceMappingURL=data:application/json;base64,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LElBQUwsQ0FBVSxLQUFWLEVBQWlCLE1BQWpCO0FBQzlCLENBOUJEIiwiZmlsZSI6ImNtZHMvd29yZG1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uL3RoZW1lcycpXG5jb25zdCB0b29scyA9IHJlcXVpcmUoJy4uL3Rvb2xzJylcblxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5jb25zdCBjaGlsZCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuXG5jb25zdCBDRklMRSA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5sZXhpbWF2ZW4ubm9vbmBcblxuZXhwb3J0cy5jb21tYW5kID0gJ21hcCA8d29yZD4nXG5leHBvcnRzLmRlc2MgPSAnTWFwcyBvZiB3b3JkIGluZm8nXG5leHBvcnRzLmJ1aWxkZXIgPSB7XG4gIGxpbWl0OiB7XG4gICAgYWxpYXM6ICdsJyxcbiAgICBkZXNjOiAnTGltaXRzIHRoZSBudW1iZXIgb2YgcmVzdWx0cycsXG4gICAgZGVmYXVsdDogMSxcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgfSxcbiAgc2F2ZToge1xuICAgIGFsaWFzOiAncycsXG4gICAgZGVzYzogJ1NhdmUgZmxhZ3MgdG8gY29uZmlnIGZpbGUnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgfSxcbn1cbmV4cG9ydHMuaGFuZGxlciA9IChhcmd2KSA9PiB7XG4gIHRvb2xzLmNoZWNrQ29uZmlnKENGSUxFKVxuICBsZXQgY29uZmlnID0gbm9vbi5sb2FkKENGSUxFKVxuICBjb25zdCB1c2VyQ29uZmlnID0ge1xuICAgIHdvcmRtYXA6IHtcbiAgICAgIGxpbWl0OiBhcmd2LmwsXG4gICAgfSxcbiAgfVxuICBpZiAoY29uZmlnLnByZWZlcikgY29uZmlnID0gXy5tZXJnZSh7fSwgY29uZmlnLCB1c2VyQ29uZmlnKVxuICBjb25zdCB0aGVtZSA9IHRoZW1lcy5sb2FkVGhlbWUoY29uZmlnLnRoZW1lKVxuICBpZiAoY29uZmlnLnZlcmJvc2UpIHRoZW1lcy5sYWJlbERvd24oJ1dvcmRtYXAnLCB0aGVtZSwgbnVsbClcbiAgY29uc3Qgd29yZCA9IGFyZ3Yud29yZFxuICBjb25zdCBsID0gYXJndi5sXG4gIGNvbnN0IGJpbiA9IGAke3Byb2Nlc3MuY3dkKCl9L2Jpbi9sZXhpbWF2ZW4uanNgXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdyYnJhaW4nLCAnY29tYmluZScsIGAtbSR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3JicmFpbicsICdpbmZvJywgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdyYnJhaW4nLCAncmh5bWUnLCBgLW0ke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ2RlZmluZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAnZXhhbXBsZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAnaHlwaGVuJywgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ29yaWdpbicsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdwaHJhc2UnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ3Byb25vdW5jZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAncmVsYXRlJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnYWNyb255bScsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnZG11c2UnLCBgLW0ke2x9YCwgYG1sPSR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdvbmVsb29rJywgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd1cmJhbicsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ2FuYWdyYW0nLCBgLXQke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGlmIChhcmd2LnMgJiYgY29uZmlnLnByZWZlcikgbm9vbi5zYXZlKENGSUxFLCBjb25maWcpXG59XG4iXX0=