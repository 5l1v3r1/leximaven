'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var child = require('child_process');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'map <word>';
exports.desc = 'Maps of word info';
exports.builder = {
  limit: {
    alias: 'l',
    desc: 'Limits the number of results',
    default: 1,
    type: 'number'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    wordmap: {
      limit: argv.l
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.label(theme, 'down', 'Wordmap');
  var word = argv.word;
  var l = argv.l;
  var bin = process.cwd() + '/build/leximaven.js';
  child.spawnSync('node', [bin, 'rbrain', 'combine', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'info', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'rhyme', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'define', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'example', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'hyphen', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'origin', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'phrase', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'pronounce', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'relate', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'acronym', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'dmuse', '-m' + l, 'ml=' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'onelook', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'urban', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'anagram', '-t' + l, '' + word], { stdio: 'inherit' });
  if (argv.s && config.merge) noon.save(CFILE, config);
  if (argv.s && !config.merge) throw new Error("Can't save user config, set option merge to true.");
};
//# sourceMappingURL=data:application/json;base64,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QUFMLENBQVUsS0FBVixFQUFpQixNQUFqQjtBQUM1QixNQUFJLEtBQUssQ0FBTCxJQUFVLENBQUMsT0FBTyxLQUF0QixFQUE2QixNQUFNLElBQUksS0FBSixDQUFVLG1EQUFWLENBQU47QUFDOUIsQ0EvQkQiLCJmaWxlIjoiY21kcy93b3JkbWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhlbWVzID0gcmVxdWlyZSgnLi4vdGhlbWVzJylcbmNvbnN0IHRvb2xzID0gcmVxdWlyZSgnLi4vdG9vbHMnKVxuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmNvbnN0IGNoaWxkID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnbWFwIDx3b3JkPidcbmV4cG9ydHMuZGVzYyA9ICdNYXBzIG9mIHdvcmQgaW5mbydcbmV4cG9ydHMuYnVpbGRlciA9IHtcbiAgbGltaXQ6IHtcbiAgICBhbGlhczogJ2wnLFxuICAgIGRlc2M6ICdMaW1pdHMgdGhlIG51bWJlciBvZiByZXN1bHRzJyxcbiAgICBkZWZhdWx0OiAxLFxuICAgIHR5cGU6ICdudW1iZXInLFxuICB9LFxuICBzYXZlOiB7XG4gICAgYWxpYXM6ICdzJyxcbiAgICBkZXNjOiAnU2F2ZSBmbGFncyB0byBjb25maWcgZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgdG9vbHMuY2hlY2tDb25maWcoQ0ZJTEUpXG4gIGxldCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gIGNvbnN0IHVzZXJDb25maWcgPSB7XG4gICAgd29yZG1hcDoge1xuICAgICAgbGltaXQ6IGFyZ3YubCxcbiAgICB9LFxuICB9XG4gIGlmIChjb25maWcubWVyZ2UpIGNvbmZpZyA9IF8ubWVyZ2Uoe30sIGNvbmZpZywgdXNlckNvbmZpZylcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGNvbmZpZy52ZXJib3NlKSB0aGVtZXMubGFiZWwodGhlbWUsICdkb3duJywgJ1dvcmRtYXAnKVxuICBjb25zdCB3b3JkID0gYXJndi53b3JkXG4gIGNvbnN0IGwgPSBhcmd2LmxcbiAgY29uc3QgYmluID0gYCR7cHJvY2Vzcy5jd2QoKX0vYnVpbGQvbGV4aW1hdmVuLmpzYFxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAncmJyYWluJywgJ2NvbWJpbmUnLCBgLW0ke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdyYnJhaW4nLCAnaW5mbycsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAncmJyYWluJywgJ3JoeW1lJywgYC1tJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdkZWZpbmUnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ2V4YW1wbGUnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ2h5cGhlbicsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdvcmlnaW4nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAncGhyYXNlJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdwcm9ub3VuY2UnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ3JlbGF0ZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ2Fjcm9ueW0nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ2RtdXNlJywgYC1tJHtsfWAsIGBtbD0ke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnb25lbG9vaycsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAndXJiYW4nLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdhbmFncmFtJywgYC10JHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBpZiAoYXJndi5zICYmIGNvbmZpZy5tZXJnZSkgbm9vbi5zYXZlKENGSUxFLCBjb25maWcpXG4gIGlmIChhcmd2LnMgJiYgIWNvbmZpZy5tZXJnZSkgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc2F2ZSB1c2VyIGNvbmZpZywgc2V0IG9wdGlvbiBtZXJnZSB0byB0cnVlLlwiKVxufVxuIl19