'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var child = require('child_process');
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'map <word>';
exports.desc = 'Maps of word info';
exports.builder = {
  limit: {
    alias: 'l',
    desc: 'Limits the number of results',
    default: 1,
    type: 'number'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    wordmap: {
      limit: argv.l
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Wordmap', theme, null);
  var word = argv.word;
  var l = argv.l;
  var bin = process.cwd() + '/bin/leximaven.js';
  child.spawnSync('node', [bin, 'rbrain', 'combine', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'info', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'rbrain', 'rhyme', '-m' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'define', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'example', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'hyphen', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'origin', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'phrase', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'pronounce', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'wordnik', 'relate', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'acronym', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'dmuse', '-m' + l, 'ml=' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'onelook', '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'urban', '-l' + l, '' + word], { stdio: 'inherit' });
  child.spawnSync('node', [bin, 'anagram', '-t' + l, '' + word], { stdio: 'inherit' });
  if (argv.s && config.merge) noon.save(CFILE, config);
  if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
};
//# sourceMappingURL=data:application/json;base64,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LElBQUwsQ0FBVSxLQUFWLEVBQWlCLE1BQWpCO0FBQzVCLE1BQUksS0FBSyxDQUFMLElBQVUsQ0FBQyxPQUFPLEtBQXRCLEVBQTZCLFFBQVEsR0FBUixDQUFZLE1BQU0sR0FBTixDQUFVLDJCQUFWLENBQVo7QUFDOUIsQ0EvQkQiLCJmaWxlIjoiY21kcy93b3JkbWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhlbWVzID0gcmVxdWlyZSgnLi4vdGhlbWVzJylcbmNvbnN0IHRvb2xzID0gcmVxdWlyZSgnLi4vdG9vbHMnKVxuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmNvbnN0IGNoaWxkID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5jb25zdCBub29uID0gcmVxdWlyZSgnbm9vbicpXG5cbmNvbnN0IENGSUxFID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmxleGltYXZlbi5ub29uYFxuXG5leHBvcnRzLmNvbW1hbmQgPSAnbWFwIDx3b3JkPidcbmV4cG9ydHMuZGVzYyA9ICdNYXBzIG9mIHdvcmQgaW5mbydcbmV4cG9ydHMuYnVpbGRlciA9IHtcbiAgbGltaXQ6IHtcbiAgICBhbGlhczogJ2wnLFxuICAgIGRlc2M6ICdMaW1pdHMgdGhlIG51bWJlciBvZiByZXN1bHRzJyxcbiAgICBkZWZhdWx0OiAxLFxuICAgIHR5cGU6ICdudW1iZXInLFxuICB9LFxuICBzYXZlOiB7XG4gICAgYWxpYXM6ICdzJyxcbiAgICBkZXNjOiAnU2F2ZSBmbGFncyB0byBjb25maWcgZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgdG9vbHMuY2hlY2tDb25maWcoQ0ZJTEUpXG4gIGxldCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gIGNvbnN0IHVzZXJDb25maWcgPSB7XG4gICAgd29yZG1hcDoge1xuICAgICAgbGltaXQ6IGFyZ3YubCxcbiAgICB9LFxuICB9XG4gIGlmIChjb25maWcubWVyZ2UpIGNvbmZpZyA9IF8ubWVyZ2Uoe30sIGNvbmZpZywgdXNlckNvbmZpZylcbiAgY29uc3QgdGhlbWUgPSB0aGVtZXMubG9hZFRoZW1lKGNvbmZpZy50aGVtZSlcbiAgaWYgKGNvbmZpZy52ZXJib3NlKSB0aGVtZXMubGFiZWxEb3duKCdXb3JkbWFwJywgdGhlbWUsIG51bGwpXG4gIGNvbnN0IHdvcmQgPSBhcmd2LndvcmRcbiAgY29uc3QgbCA9IGFyZ3YubFxuICBjb25zdCBiaW4gPSBgJHtwcm9jZXNzLmN3ZCgpfS9iaW4vbGV4aW1hdmVuLmpzYFxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAncmJyYWluJywgJ2NvbWJpbmUnLCBgLW0ke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdyYnJhaW4nLCAnaW5mbycsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAncmJyYWluJywgJ3JoeW1lJywgYC1tJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdkZWZpbmUnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ2V4YW1wbGUnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ2h5cGhlbicsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdvcmlnaW4nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ3dvcmRuaWsnLCAncGhyYXNlJywgYC1sJHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnd29yZG5paycsICdwcm9ub3VuY2UnLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICd3b3JkbmlrJywgJ3JlbGF0ZScsIGAtbCR7bH1gLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ2Fjcm9ueW0nLCBgJHt3b3JkfWBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSlcbiAgY2hpbGQuc3Bhd25TeW5jKCdub2RlJywgW2JpbiwgJ2RtdXNlJywgYC1tJHtsfWAsIGBtbD0ke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAnb25lbG9vaycsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBjaGlsZC5zcGF3blN5bmMoJ25vZGUnLCBbYmluLCAndXJiYW4nLCBgLWwke2x9YCwgYCR7d29yZH1gXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG4gIGNoaWxkLnNwYXduU3luYygnbm9kZScsIFtiaW4sICdhbmFncmFtJywgYC10JHtsfWAsIGAke3dvcmR9YF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KVxuICBpZiAoYXJndi5zICYmIGNvbmZpZy5tZXJnZSkgbm9vbi5zYXZlKENGSUxFLCBjb25maWcpXG4gIGlmIChhcmd2LnMgJiYgIWNvbmZpZy5tZXJnZSkgY29uc29sZS5lcnIoY2hhbGsucmVkKCdTZXQgb3B0aW9uIG1lcmdlIHRvIHRydWUhJykpXG59XG4iXX0=