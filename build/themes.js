'use strict';

var _ = require('lodash');
var chalk = require('chalk');
var fs = require('fs');
var glob = require('glob');
var noon = require('noon');

var TDIR = process.env.NODE_PATH + '/leximaven/themes/';

/**
  * The themes module provides useful repetitive theme tasks
  * @module Themes
  */

/**
  * Loads theme
  * @public
  * @param {string} theme The name of the theme
  * @return {Object} load The style to use
  */
exports.loadTheme = function (theme) {
  var dirExists = null;
  var load = null;
  try {
    fs.statSync('themes');
    dirExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') dirExists = false;
  }
  if (dirExists) {
    load = noon.load('themes/' + theme + '.noon');
  } else {
    load = noon.load('' + TDIR + theme + '.noon');
  }
  return load;
};

/**
  * Gets themes for list command
  * @public
  * @return {Array} List of theme names
  */
exports.getThemes = function () {
  var list = [];
  var dirExists = null;
  var files = [];
  try {
    fs.statSync('themes');
    dirExists = true;
  } catch (e) {
    if (e.code === 'ENOENT') dirExists = false;
  }
  if (dirExists) {
    files = glob.sync('themes/*.noon');
  } else {
    files = glob.sync(TDIR + '*.noon');
  }
  _.each(files, function (path) {
    var name = path.replace(/[a-z0-9\/_\.]*themes\//, '').replace(/\.noon/, '');
    list.push(name);
  });
  return list;
};

/**
  * Prints connector and content below the label
  * @public
  * @param {string} text The label text
  * @param {Object} theme The style to use
  * @param {string} [content] The text the label points at
  */
exports.labelDown = function (text, theme, content) {
  var pstyle = _.get(chalk, theme.prefix.style);
  process.stdout.write(pstyle(theme.prefix.str));
  var tstyle = _.get(chalk, theme.text.style);
  process.stdout.write(tstyle(text));
  var sstyle = _.get(chalk, theme.suffix.style);
  process.stdout.write(sstyle(theme.suffix.str));
  console.log('');
  if (content !== null || undefined) {
    var cnstyle = _.get(chalk, theme.connector.style);
    process.stdout.write(cnstyle(theme.connector.str));
    var ctstyle = _.get(chalk, theme.content.style);
    console.log(ctstyle(content));
  }
};

/**
  * Prints connector and content next to the label
  * @public
  * @param {string} text The label text
  * @param {Object} theme The style to use
  * @param {string} [content] The text the label points at
  */
exports.labelRight = function (text, theme, content) {
  var pstyle = _.get(chalk, theme.prefix.style);
  process.stdout.write(pstyle(theme.prefix.str));
  var tstyle = _.get(chalk, theme.text.style);
  process.stdout.write(tstyle(text));
  var sstyle = _.get(chalk, theme.suffix.style);
  process.stdout.write(sstyle(theme.suffix.str));
  if (content !== null || undefined) {
    var cnstyle = _.get(chalk, theme.connector.style);
    process.stdout.write(cnstyle(theme.connector.str));
    var ctstyle = _.get(chalk, theme.content.style);
    console.log(ctstyle(content));
  }
};
//# sourceMappingURL=data:application/json;base64,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c3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuXG5jb25zdCBURElSID0gYCR7cHJvY2Vzcy5lbnYuTk9ERV9QQVRIfS9sZXhpbWF2ZW4vdGhlbWVzL2BcblxuLyoqXG4gICogVGhlIHRoZW1lcyBtb2R1bGUgcHJvdmlkZXMgdXNlZnVsIHJlcGV0aXRpdmUgdGhlbWUgdGFza3NcbiAgKiBAbW9kdWxlIFRoZW1lc1xuICAqL1xuXG4vKipcbiAgKiBMb2FkcyB0aGVtZVxuICAqIEBwdWJsaWNcbiAgKiBAcGFyYW0ge3N0cmluZ30gdGhlbWUgVGhlIG5hbWUgb2YgdGhlIHRoZW1lXG4gICogQHJldHVybiB7T2JqZWN0fSBsb2FkIFRoZSBzdHlsZSB0byB1c2VcbiAgKi9cbmV4cG9ydHMubG9hZFRoZW1lID0gKHRoZW1lKSA9PiB7XG4gIGxldCBkaXJFeGlzdHMgPSBudWxsXG4gIGxldCBsb2FkID0gbnVsbFxuICB0cnkge1xuICAgIGZzLnN0YXRTeW5jKCd0aGVtZXMnKVxuICAgIGRpckV4aXN0cyA9IHRydWVcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSBkaXJFeGlzdHMgPSBmYWxzZVxuICB9XG4gIGlmIChkaXJFeGlzdHMpIHtcbiAgICBsb2FkID0gbm9vbi5sb2FkKGB0aGVtZXMvJHt0aGVtZX0ubm9vbmApXG4gIH0gZWxzZSB7XG4gICAgbG9hZCA9IG5vb24ubG9hZChgJHtURElSfSR7dGhlbWV9Lm5vb25gKVxuICB9XG4gIHJldHVybiBsb2FkXG59XG5cbi8qKlxuICAqIEdldHMgdGhlbWVzIGZvciBsaXN0IGNvbW1hbmRcbiAgKiBAcHVibGljXG4gICogQHJldHVybiB7QXJyYXl9IExpc3Qgb2YgdGhlbWUgbmFtZXNcbiAgKi9cbmV4cG9ydHMuZ2V0VGhlbWVzID0gKCkgPT4ge1xuICBjb25zdCBsaXN0ID0gW11cbiAgbGV0IGRpckV4aXN0cyA9IG51bGxcbiAgbGV0IGZpbGVzID0gW11cbiAgdHJ5IHtcbiAgICBmcy5zdGF0U3luYygndGhlbWVzJylcbiAgICBkaXJFeGlzdHMgPSB0cnVlXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykgZGlyRXhpc3RzID0gZmFsc2VcbiAgfVxuICBpZiAoZGlyRXhpc3RzKSB7XG4gICAgZmlsZXMgPSBnbG9iLnN5bmMoJ3RoZW1lcy8qLm5vb24nKVxuICB9IGVsc2Uge1xuICAgIGZpbGVzID0gZ2xvYi5zeW5jKGAke1RESVJ9Ki5ub29uYClcbiAgfVxuICBfLmVhY2goZmlsZXMsIChwYXRoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHBhdGgucmVwbGFjZSgvW2EtejAtOVxcL19cXC5dKnRoZW1lc1xcLy8sICcnKS5yZXBsYWNlKC9cXC5ub29uLywgJycpXG4gICAgbGlzdC5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICAqIFByaW50cyBjb25uZWN0b3IgYW5kIGNvbnRlbnQgYmVsb3cgdGhlIGxhYmVsXG4gICogQHB1YmxpY1xuICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBsYWJlbCB0ZXh0XG4gICogQHBhcmFtIHtPYmplY3R9IHRoZW1lIFRoZSBzdHlsZSB0byB1c2VcbiAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdIFRoZSB0ZXh0IHRoZSBsYWJlbCBwb2ludHMgYXRcbiAgKi9cbmV4cG9ydHMubGFiZWxEb3duID0gKHRleHQsIHRoZW1lLCBjb250ZW50KSA9PiB7XG4gIGNvbnN0IHBzdHlsZSA9IF8uZ2V0KGNoYWxrLCB0aGVtZS5wcmVmaXguc3R5bGUpXG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlKHBzdHlsZSh0aGVtZS5wcmVmaXguc3RyKSlcbiAgY29uc3QgdHN0eWxlID0gXy5nZXQoY2hhbGssIHRoZW1lLnRleHQuc3R5bGUpXG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlKHRzdHlsZSh0ZXh0KSlcbiAgY29uc3Qgc3N0eWxlID0gXy5nZXQoY2hhbGssIHRoZW1lLnN1ZmZpeC5zdHlsZSlcbiAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoc3N0eWxlKHRoZW1lLnN1ZmZpeC5zdHIpKVxuICBjb25zb2xlLmxvZygnJylcbiAgaWYgKGNvbnRlbnQgIT09IG51bGwgfHwgdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY25zdHlsZSA9IF8uZ2V0KGNoYWxrLCB0aGVtZS5jb25uZWN0b3Iuc3R5bGUpXG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY25zdHlsZSh0aGVtZS5jb25uZWN0b3Iuc3RyKSlcbiAgICBjb25zdCBjdHN0eWxlID0gXy5nZXQoY2hhbGssIHRoZW1lLmNvbnRlbnQuc3R5bGUpXG4gICAgY29uc29sZS5sb2coY3RzdHlsZShjb250ZW50KSlcbiAgfVxufVxuXG4vKipcbiAgKiBQcmludHMgY29ubmVjdG9yIGFuZCBjb250ZW50IG5leHQgdG8gdGhlIGxhYmVsXG4gICogQHB1YmxpY1xuICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBsYWJlbCB0ZXh0XG4gICogQHBhcmFtIHtPYmplY3R9IHRoZW1lIFRoZSBzdHlsZSB0byB1c2VcbiAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdIFRoZSB0ZXh0IHRoZSBsYWJlbCBwb2ludHMgYXRcbiAgKi9cbmV4cG9ydHMubGFiZWxSaWdodCA9ICh0ZXh0LCB0aGVtZSwgY29udGVudCkgPT4ge1xuICBjb25zdCBwc3R5bGUgPSBfLmdldChjaGFsaywgdGhlbWUucHJlZml4LnN0eWxlKVxuICBwcm9jZXNzLnN0ZG91dC53cml0ZShwc3R5bGUodGhlbWUucHJlZml4LnN0cikpXG4gIGNvbnN0IHRzdHlsZSA9IF8uZ2V0KGNoYWxrLCB0aGVtZS50ZXh0LnN0eWxlKVxuICBwcm9jZXNzLnN0ZG91dC53cml0ZSh0c3R5bGUodGV4dCkpXG4gIGNvbnN0IHNzdHlsZSA9IF8uZ2V0KGNoYWxrLCB0aGVtZS5zdWZmaXguc3R5bGUpXG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlKHNzdHlsZSh0aGVtZS5zdWZmaXguc3RyKSlcbiAgaWYgKGNvbnRlbnQgIT09IG51bGwgfHwgdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY25zdHlsZSA9IF8uZ2V0KGNoYWxrLCB0aGVtZS5jb25uZWN0b3Iuc3R5bGUpXG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY25zdHlsZSh0aGVtZS5jb25uZWN0b3Iuc3RyKSlcbiAgICBjb25zdCBjdHN0eWxlID0gXy5nZXQoY2hhbGssIHRoZW1lLmNvbnRlbnQuc3R5bGUpXG4gICAgY29uc29sZS5sb2coY3RzdHlsZShjb250ZW50KSlcbiAgfVxufVxuIl19